*pi_netrw.txt*  For Vim version 8.0.  最近更新: 2017年8月


	    -----------------------------------------------------
		NETRW 參考手冊	作者: Charles E. Campbell
	    -----------------------------------------------------
				譯者: Willis
				http://vimcdoc.sf.net

Author:  Charles E. Campbell  <NdrOchip@ScampbellPfamily.AbizM>
	  (remove NOSPAM from Campbell's email first)

Copyright: Copyright (C) 2016 Charles E Campbell    *netrw-copyright*
	The VIM LICENSE applies to the files in this package, including
	netrw.vim, pi_netrw.txt, netrwFileHandlers.vim, netrwSettings.vim, and
	syntax/netrw.vim.  Like anything else that's free, netrw.vim and its
	associated files are provided *as is* and comes with no warranty of
	any kind, either expressed or implied.  No guarantees of
	merchantability.  No guarantees of suitability for any purpose.  By
	using this plugin, you agree that in no event will the copyright
	holder be liable for any damages resulting from the use of this
	software. Use at your own risk!

		*netrw*
		*dav*    *ftp*    *netrw-file*  *rcp*    *scp*
		*davs*   *http*   *netrw.vim*   *rsync*  *sftp*
		*fetch*  *network*

==============================================================================
1. 內容							*netrw-contents* {{{1

1.  內容..................................................|netrw-contents|
2.  netrw 初步............................................|netrw-start|
3.  netrw 參考手冊........................................|netrw-ref|
      外 部 程 序 及 協 議................................|netrw-externapp|
      讀 取...............................................|netrw-read|
      寫 入...............................................|netrw-write|
      執 行...............................................|netrw-source|
      目 錄 列 表.........................................|netrw-dirlist|
      改 變 用 戶 名 和 密 碼.............................|netrw-chgup|
      變 量 與 設 置......................................|netrw-variables|
      路 徑...............................................|netrw-path|
4.  基於網絡的文件傳輸....................................|netrw-xfer|
      NETRC...............................................|netrw-netrc|
      密 碼...............................................|netrw-passwd|
5.  激活..................................................|netrw-activate|
6.  透明遠程文件編輯......................................|netrw-transparent|
7.  Ex 命令...............................................|netrw-ex|
8.  變量和選項............................................|netrw-var|
9.  目錄瀏覽..............................................|netrw-browse|
      瀏覽簡介............................................|netrw-intro-browse|
      快速參考: 映射......................................|netrw-browse-maps|
      快速參考: 命令......................................|netrw-browse-cmds|
      顯示橫幅............................................|netrw-I|
      把目錄加入書籤......................................|netrw-mb|
      瀏覽................................................|netrw-cr|
      壓縮當前樹列表目錄..................................|netrw-s-cr|
      水平分割窗口方式瀏覽................................|netrw-o|
      在新標籤頁中瀏覽....................................|netrw-t|
      垂直分割窗口方式瀏覽................................|netrw-v|
      改變列表方式.(瘦 寬 長 樹)..........................|netrw-i|
      切換到收入書籤的目錄................................|netrw-gb|
      切換到較早訪問的目錄................................|netrw-u|
      切換到較遲訪問的目錄................................|netrw-U|
      通過特殊處理程序定制瀏覽............................|netrw-x|
      刪除書籤............................................|netrw-mB|
      刪除文件或目錄......................................|netrw-D|
      目錄探索命令........................................|netrw-explore|
      使用星號和模式進行探索..............................|netrw-star|
      顯示文件信息........................................|netrw-qf|
      編輯文件或目錄隱藏列表..............................|netrw-ctrl-h|
      編輯排序序列........................................|netrw-S|
      強製作為文件或目錄對待..............................|netrw-gd| |netrw-gf|
      向上一層............................................|netrw--|
      隱藏文件或目錄......................................|netrw-a|
      改進瀏覽............................................|netrw-ssh-hack|
      列出書籤和歷史......................................|netrw-qb|
      建立新目錄..........................................|netrw-d|
      使瀏覽目錄成為當前目錄..............................|netrw-c|
      標記文件............................................|netrw-mf|
      撤銷文件標記........................................|netrw-mF|
      用位置列表標記文件..................................|netrw-qL|
      用 QuickFix 列表標記文件............................|netrw-qF|
      用正規表達式標記文件................................|netrw-mr|
      帶標記文件: 任意外殼命令............................|netrw-mx|
      帶標記文件: 任意外殼命令，整塊......................|netrw-mX|
      帶標記文件: 任意命令................................|netrw-mv|
      帶標記文件: 參數列表................................|netrw-ma| |netrw-mA|
      帶標記文件: 壓縮及解壓縮............................|netrw-mz|
      帶標記文件: 複製....................................|netrw-mc|
      帶標記文件: 比較....................................|netrw-md|
      帶標記文件: 編輯....................................|netrw-me|
      帶標記文件: grep....................................|netrw-mg|
      帶標記文件: 按後綴隱藏或顯示........................|netrw-mh|
      帶標記文件: 移動....................................|netrw-mm|
      帶標記文件: 打印....................................|netrw-mp|
      帶標記文件: 執行....................................|netrw-ms|
      帶標記文件: 設置目標目錄............................|netrw-mt|
      帶標記文件: 建立標籤................................|netrw-mT|
      帶標記文件: 用書籤作為目標目錄......................|netrw-Tb|
      帶標記文件: 用歷史作為目標目錄......................|netrw-Th|
      帶標記文件: 撤銷標記................................|netrw-mu|
      netrw 瀏覽器變量....................................|netrw-browser-var|
      netrw 瀏覽和選項不兼容性............................|netrw-incompatible|
      netrw 設置窗口......................................|netrw-settings-window|
      獲取文件............................................|netrw-O|
      預覽窗口............................................|netrw-p|
      前次窗口............................................|netrw-P|
      刷新列表............................................|netrw-ctrl-l|
      反轉排序順序........................................|netrw-r|
      給文件或目錄換名....................................|netrw-R|
      選擇排序風格........................................|netrw-s|
      選擇編輯窗口........................................|netrw-C|
10. 問題和修正............................................|netrw-problems|
11. 調試 netrw 自身.......................................|netrw-debug|
12. 歷史..................................................|netrw-history|
13. TODO .................................................|netrw-todo|
14. 鳴謝..................................................|netrw-credits|

{Vi 沒有此項功能}

==============================================================================
2. netrw 初步						*netrw-start* {{{1

netrw 使得讀寫文件和通過本地或網絡進行和瀏覽變得容易！
首先，確信你打開了插件。這樣，你需要至少在 <.vimrc> 裡設置: (或者參見
|netrw-activate|) >

	set nocp                    " 不設置 'compatible'
	filetype plugin on          " 允許使用插件
<
(見 |'cp'| 和 |:filetype-plugin-on|)

netrw 支持用 url "透明" 地編輯其它機器上的文件 (見 |netrw-transparent|)。考慮
一個例子，假設你在其它機器上有一個帳號；如果 scp 可用的話，嘗試 >

	vim scp://hostname/path/to/file
<
想使 ssh/scp 更容易使用麼？察看 |netrw-ssh-hack|！

如果你只有 ftp，沒有 ssh/scp 怎麼辦？也很容易；嘗試 >

	vim ftp://hostname/path/to/file
<
想使 ftp 更容易使用麼？檢查你的 ftp 是不是支持叫 <.netrc> 的文件 -- 通常，它在
你的主目錄裡，讀寫權限的設置只限用戶自己可讀 (也就是，沒有組、世界、其它用戶等
的權限)，其形式是以下這樣的行 >

	machine HOSTNAME login USERID password "PASSWORD"
	machine HOSTNAME login USERID password "PASSWORD"
	...
	default	         login USERID password "PASSWORD"
<
Windows 的 ftp 不支持 .netrc；不過，可以在 .vimrc 裡這樣做: >

   let g:netrw_ftp_cmd= 'c:\Windows\System32\ftp -s:C:\Users\MyUserName\MACHINE'
<
Netrw 會用 url 的主機名來代替 "MACHINE"，從而，你可以為每個網站分別提供一個文
件: c:\Users\MyUserName\MachineName，來指定 >
	userid
	password

還有瀏覽 -- 你只想在編輯文件前四處看看。在自己機器上瀏覽，只要 "編輯" 目錄: >

	vim .
	vim /home/userid/path
<
要在遠端機器上瀏覽，也就是 "編輯" 目錄 (但要確保目錄名後面跟上 "/"): >

	vim scp://hostname/
	vim ftp://hostname/path/to/dir/
<
詳情可見 |netrw-browse|！

除了 scp 和 ftp 以外，還支持更多其他的協議！關於如何在 netrw 和 vim 中使用這些
外部應用，見下一節，|netrw-externapp|。

禁 止 載 入 						*netrw-noload*

如果你想使用插件，但由於某種原因不想用 netrw，那你需要禁止調入 netrw 插件本身
和自動調入的部分。為此，在 <.vimrc> 裡加入如下兩行: >

	:let g:loaded_netrw       = 1
	:let g:loaded_netrwPlugin = 1
<

==============================================================================
3. netrw 參考手冊					*netrw-ref* {{{1

   除了 |netrw-start| 提到的 scp 和 ftp 以外，netrw 還支持幾個協議。包括 dav、
   fetch、http、...。可以參閱 |netrw-externapp| 的列表。每個協議和一個變量關
   聯，該變量指定支持協議的缺省命令。

外 部 程 序 及 協 議					*netrw-externapp* {{{2

	協議      變量	               缺省值
	--------  ----------------     -------------
	   dav:   *g:netrw_dav_cmd*      = "cadaver"    如果 cadaver 可執行
	   dav:   g:netrw_dav_cmd      = "curl -o"    否則，如果 curl 可執行
	 fetch:   *g:netrw_fetch_cmd*    = "fetch -o"   如果 fetch 可用
	   ftp:   *g:netrw_ftp_cmd*      = "ftp"
	  http:   *g:netrw_http_cmd*     = "elinks"     如果 elinks 可用
	  http:   g:netrw_http_cmd     = "links"      否則，如果  links 可用
	  http:   g:netrw_http_cmd     = "curl"       否則，如果  curl  可用
	  http:   g:netrw_http_cmd     = "wget"       否則，如果  wget  可用
	  http:   g:netrw_http_cmd     = "fetch"      否則，如果  fetch 可用
	  http:   *g:netrw_http_put_cmd* = "curl -T"
	   rcp:   *g:netrw_rcp_cmd*      = "rcp"
	 rsync:   *g:netrw_rsync_cmd*    = "rsync -a"
	   scp:   *g:netrw_scp_cmd*      = "scp -q"
	  sftp:   *g:netrw_sftp_cmd*     = "sftp"
	  file:   *g:netrw_file_cmd*     = "elinks" 或 "links"

	*g:netrw_http_xcmd* : http://... 協議的選項字符串由此字符串指定，而且
	可以獨立修改。缺省地，http 處理命令的選項參數是

		    elinks : "-source >"
		    links  : "-dump >"
		    curl   : "-o"
		    wget   : "-q -O"
		    fetch  : "-o"

	例如，如果你的系統有 elinks 而你想看渲染後的頁面內容 (而不是缺省的顯示
	源代碼)，可以在 .vimrc 裡加上 >
		let g:netrw_http_xcmd= "-dump >"
<
	g:netrw_http_put_cmd: 此選項指定可執行文件和任何必須的選項。此命令在
	url 上執行 PUT 操作。


讀 取						*netrw-read* *netrw-nread* {{{2

	一般的，普通的編輯命令都可以使用 url 形式，例如 >

		:e ftp://[user@]machine/path
<
	Netrw 也支持 Nread 命令:

	:Nread ?					給出幫助
	:Nread "machine:file"				使用 rcp
	:Nread "machine file"				使用 ftp 並用 <.netrc>
	:Nread "machine id password file"		使用 ftp
	:Nread "dav://machine[:port]/file"		使用 cadaver
	:Nread "fetch://[user@]machine/file"		使用 fetch
	:Nread "ftp://[user@]machine[[:#]port]/file"	使用 ftp 並用 <.netrc>
	:Nread "http://[user@]machine/file"		使用 http 用 wget 方法
	:Nread "rcp://[user@]machine/file"		使用 rcp
	:Nread "rsync://[user@]machine[:port]/file"	使用 rsync
	:Nread "scp://[user@]machine[[:#]port]/file"	使用 scp
	:Nread "sftp://[user@]machine/file"		使用 sftp

寫 入					*netrw-write* *netrw-nwrite* {{{2

	普通的保存命令都可以使用 url 形式，例如 >

		:w ftp://[user@]machine/path
<
	Netrw 也支持 Nwrite 命令:

	:Nwrite ?					給出幫助
	:Nwrite "machine:file"				使用 rcp
	:Nwrite "machine file"				使用 ftp 並用 <.netrc>
	:Nwrite "machine id password file"		使用 ftp
	:Nwrite "dav://machine[:port]/file"		使用 cadaver
	:Nwrite "ftp://[user@]machine[[:#]port]/file"	使用 ftp 並用 <.netrc>
	:Nwrite "rcp://[user@]machine/file"		使用 rcp
	:Nwrite "rsync://[user@]machine[:port]/file"	使用 rsync
	:Nwrite "scp://[user@]machine[[:#]port]/file"	使用 scp
	:Nwrite "sftp://[user@]machine/file"		使用 sftp
	不支持 http: 協議！

執 行 腳 本					*netrw-source* {{{2

	普通的執行腳本命令都可以使用 url 形式，例如 >

		:so ftp://[user@]machine/path
<
	Netrw 也支持 Nsource 命令:

	:Nsource ?					給出幫助
	:Nsource "dav://machine[:port]/path"		使用 cadaver
	:Nsource "fetch://[user@]machine/path"		使用 fetch
	:Nsource "ftp://[user@]machine[[:#]port]/path"	使用 ftp w/ <.netrc>
	:Nsource "http://[user@]machine/path"		使用 http 用 wget 方法
	:Nsource "rcp://[user@]machine/path"		使用 rcp
	:Nsource "rsync://[user@]machine[:port]/path"	使用 rsync
	:Nsource "scp://[user@]machine[[:#]port]/path"	使用 scp
	:Nsource "sftp://[user@]machine/path"		使用 sftp

目 錄 列 表			*netrw-trailingslash* *netrw-dirlist* {{{2

	要瀏覽一個目錄以得到文件列表，只需編輯該目錄: >

		:e scp://[user]@hostname/path/
		:e ftp://[user]@hostname/path/
<
	對於遠程目錄列表 (也就是使用 scp 或 ftp 的那些)，結尾的 "/" 是必需的 (
	它告訴 netrw 對該參數使用目錄方式瀏覽而不是去下載文件)。

	Nread 命令也可完成 (再說一次，結尾的斜槓是必需的): >

		:Nread [protocol]://[user]@hostname/path/
<
						*netrw-login* *netrw-password*
改 變 用 戶 名 和 密 碼			*netrw-chgup* *netrw-userpass* {{{2

	使用 ftp 的嘗試會提示你輸入用戶名字和密碼。它們被存在全局變量
	|g:netrw_uid| 和 |s:netrw_passwd| 裡。下一次使用 ftp 就會再次使用這兩
	個字符串來簡化 ftp 將來的應用。不過，如果你要使用別的用戶名和/或密碼，
	先調用 |NetUserPass()|。為了解決輸入密碼的問題，檢查一下你的 ftp 是否
	支持在你的主目錄下的 <.netrc> 文件。另見 |netrw-passwd| (如果你用
	ssh/scp 但希望知道 scp 如何能不輸入密碼，見 |netrw-ssh-hack|)。

	:NetUserPass [uid [password]]		-- 如果需要，提示
	:call NetUserPass()			-- 提示 uid 和 password
	:call NetUserPass("uid")		-- 提示 password
	:call NetUserPass("uid","password")	-- 設置全局 uid 和 password

(相關主題: |ftp| |netrw-userpass| |netrw-start|)

NETRW 變 量 和 設 置					*netrw-variables* {{{2
    (另見:
    |netrw-browser-var|     : netrw 瀏覽器選項變量
    |netrw-protocol|        : 文件傳輸協議選項變量
    |netrw-settings|        : 附加文件傳輸選項
    |netrw-browser-options| : 這些選項影響如何瀏覽目錄
    )

netrw 提供很多變量，方便你根據自己的喜好定制 netrw。一個查閱這些變量的方法是
:NetrwSettings (見 |netrw-settings|)，它顯示你當前的 netrw 設置。大多數設置在
下面描述，還有的在 |netrw-browser-options| 和 |netrw-externapp| 那裡:

 *b:netrw_lastfile*	最近一次通過網絡讀寫的文件，該變量局部於緩衝區
			(用於支持無參數的 :Nw )

 *g:netrw_bufsettings*	netrw 緩衝區使用的設置
			(缺省) noma nomod nonu nowrap ro nobl

 *g:netrw_chgwin*	指定後續文件編輯使用的窗口號 (另見 |netrw-C|)
			(缺省) -1

 *g:Netrw_funcref*	指定 netrw 編輯文件時調用的函數。先編輯文件，然後調用
			此函數引用 (|Funcref|)。
			該變量也可包含函數引用的列表。
			(缺省) 無
			(g:Netrw... 中的大寫是必需的，因為它保存函函數引用)
>
			    示例: 放入 .vimrc；影響所有文件打開
			    fun! MyFuncRef()
			    endfun
			    let g:Netrw_funcref= function("MyFuncRef")

<
 *g:Netrw_UserMaps*	指定函數或函數的 |List|，可用於設置用戶指定的映射和功
			能。
			見 |netrw-usermaps|

 *g:netrw_ftp*		   如果不存在，用缺省的 ftp
			=0 使用缺省的 ftp		       (uid password)
			=1 使用替代的 ftp 方法		  (user uid password)
			   如果你的 ftp 使用有問題，嘗試修改此值，看看另一個
			   ftp 方法是否適合你的設置。

 *g:netrw_ftp_options*     缺省使用，這些選項的目的是關閉交互揭示，並且避免初
			始連接時自動重新登錄。但是，看來不是所有 ftp 的實現都
			支持 (例如 ncftp)。
		        ="-i -n"

 *g:netrw_ftpextracmd*	缺省: 不存在
			如果此變量存在，那麼它包含的任何字符串將被加入到發送給
			ftp 客戶的命令中。一個例子:
			  ="passive"

 *g:netrw_ftpmode*	="binary"				       (缺省)
			="ascii"

 *g:netrw_ignorenetrc*	=0 (linux、cygwin 缺省)
			=1 如果你有 <.netrc> 文件但不能工作，設置此變量可以忽
			   略該文件。(Windows + cmd.exe 缺省)

 *g:netrw_menu*		=0 關閉 netrw 菜單
			=1 (缺省) 打開 netrw 菜單

 *g:netrw_nogx*		如果此變量存在，"gx" 映射不可用 (見 |netrw-gx|)

 *g:netrw_uid*		(ftp) 用戶名，    可用於同一 vim 會話中
 *s:netrw_passwd*	(ftp) 密碼，      可用於同一 vim 會話中

 *g:netrw_preview*	=0 (缺省) 在橫向分割的窗口中顯示預覽窗口
			=1 在縱向分割的窗口中顯示預覽窗口以相同方式影響 "前次
			   窗口" (見 |netrw-P|)。
			|g:netrw_alto| 變量可用於提供額外的分割控制:
				g:netrw_preview g:netrw_alto 結果
				         0             0     |:aboveleft|
				         0             1     |:belowright|
				         1             0     |:topleft|
				         1             1     |:botright|
			要控制大小，可見 |g:netrw_winsize|

 *g:netrw_scpport*      = "-P" : 設置 scp 端口的選項
 *g:netrw_sshport*      = "-p" : 設置 ssh 端口的選項

 *g:netrw_sepchr*	=\0xff
			=\0x01 如果 enc == euc-jp (也許也適用於其它編碼，請讓
			   我知道)
			   內部用來分隔文件名和優先碼。
			   見 |netrw-p12|。

  *g:netrw_silent*	=0 : 正常方式完成傳輸
			=1 : 安靜方式完成傳輸

 *g:netrw_use_errorwindow* =1 : netrw 的消息會使用分開的單行窗口。該窗口提供了
 		 		消息的可靠傳送。(缺省)
			 =0 : netrw 的消息使用 echoerr；這種方式下不是所有消息
			      都保證能看到，但不需要退出窗口。

 *g:netrw_win95ftp*	=1 如果使用 Win95，刪除四個操作系統在傳輸時 "提供" 的
			   拖尾行
			=0 強制正常的 ftp 行為 (不刪除拖尾的行)

 *g:netrw_cygwin*	=1 假設在 windows 上的 scp 是 cygwin 的版本。同時允許
			   用帶時間和大小排序的 ls 進行網絡瀏覽 (windows 的缺
			   省值)
			=0 假設在 windows 上的 scp 接受 windows 風格的路徑網絡
			   瀏覽使用 dir 而不是 ls
			   如果使用 unix，忽略此選項

 *g:netrw_use_nt_rcp*	=0 不要使用 WinNT、Win2000 和 WinXP 的 rcp
			=1 使用 WinNT 二進制模式的 rcp            (缺省)

路 徑							*netrw-path* {{{2

對於多數協議，文件路徑通常相對於用戶目錄。不過，有的協議裡路徑可以相對於一些相
關的目錄。
>
	例如:  vim scp://user@host/somefile
	例如:  vim scp://user@host/subdir1/subdir2/somefile
<
其中 "somefile" 在 "user" 的主目錄。如果你想要文件相對於根目錄的路徑，使用完整
路徑: >
	例如:  vim scp://user@host//somefile
	例如:  vim scp://user@host//subdir1/subdir2/somefile
<
==============================================================================
4. 基於網絡的文件傳輸					*netrw-xfer* {{{1

Vim 下基於網絡的文件傳輸是用基於 Vim 腳本的插件技術實現的 (<netrw.vim>)。目
前，它支持基於網絡的讀寫，並支持 rcp、scp、ftp 或者 ftp+<.netrc>、scp、fetch、
dav/cadaver、rsync、 或者 sftp。

目前，http 只支持通過 wget 或者 fetch 讀取。

<netrw.vim> 是一個標準插件，它起到 Vim 和若干文件傳輸程序的粘結劑作用。它使用
自動命令事件 (BufReadCmd、FileReadCmd、BufWriteCmd) 來攔截貌似 url 的文件名的
讀寫。 >

	例如 vim ftp://hostname/path/to/file
<
冒號前面的字符序列指定所使用的協議；在這個例子裡，就是 ftp。
<netrw.vim> 腳本然後構成一個或多個命令 (一般是 ftp)，然後用外部程序去執行
(ftp，scp 等) 來完成實際的文件傳輸/協議。文件被先讀寫到一個臨時文件裡 (在
Unix/Linux 上，/tmp/...)， <netrw.vim> 腳本會清理該文件。

現在，說說 Jan Minař 的 "FTP 用戶名和密碼披露問題": 首先，ftp 不是安全協議。用
戶名和密碼在因特網上是明碼傳輸的；任何網絡嗅探器都可以截取；這不是 netrw 的問
題，是 ftp 的問題。如果你很介意這點，請使用 scp 或 sftp。

只要遠端宿主不變。netrw 會重用同一 vim 會話的用戶名和密碼。

Jan 也許不很清楚 netrw 對 ftp 的處理方式: 正常情況下，一個 "ftp 會話" 會執行多
個命令，他也許認為用戶名/密碼信息應該只在單個 ftp 會話中保留。但是，netrw 的每
個 ftp 操作都是在單獨的 "ftp 會話" 中進行的: 只在所謂單個 "ftp 會話" 中記住用
戶名/密碼，就跟完全不記住用戶名/密碼一樣。依我愚見，如果這樣去，譬如說，瀏覽遠
程的目錄，用戶很快就會厭煩的。

不過，很感謝 Jan M. 指出許多 netrw (包括 vim 本身) 處理 "特意構造" 文件名的漏
洞。|shellescape()| 和 |fnameescape()| 函數就是為此由 Bram Moolenaar 實現來處
理這些問題的，netrw 也做了相應的修改，調用了這些函數。不過，我的建議還是，如果
所謂的 "文件名" 看來像 vim 的命令而你不放心，不要打開這些文件。

				*netrw-putty* *netrw-pscp* *netrw-psftp*
你可以通過修改變量修改任何實現協議的外部應用程序 (例如，scp 使用
g:netrw_scp_cmd 變量，缺省是 "scp -q")。 例如，考慮 PuTTY 的使用: >

	let g:netrw_scp_cmd = '"c:\Program Files\PuTTY\pscp.exe" -q -batch'
	let g:netrw_sftp_cmd= '"c:\Program Files\PuTTY\psftp.exe"'
<
(備註: 有報告說 windows 7 的 putty v0.6 的 "-batch" 選項不工作，那個系統最好不
       要那麼改)

|netrw-p8| 介紹更多，如 putty、pscp、psftp 等。

ftp，一個古老的協議，看來被很多實現所支持。不幸的是，很多實現都有問題 (例如，
在文件尾部加入垃圾字符)。所以，如果有這樣的問題，用戶可以自己決定寫一個
NetReadFixup() 函數來在從 ftp 讀文件後進行清理。有些 Unix 系統 (例如，
FreeBSD) 提供了一個叫 "fetch" 的工具，它使用 ftp 協議，但是沒有這樣的問題，而
且更方便 <netrw.vim> 的使用。所以，只要 "fetch" 可用 (也就是可以執行)，最好用
它來用來實現 ftp://... 的傳輸。

對於 rcp、scp、sftp 和 http 協議，你可能希望基於網絡的文件傳輸盡可能透明；例如
>
	vim rcp://[user@]machine/path
	vim scp://[user@]machine/path
<
如果你的 ftp 支持 <.netrc>，那麼也可以透明的使用 ftp，因為需要的機器名字，用戶
名和密碼都定義在這個文件裡。你的 ftp 必須自己能理解並使用 <.netrc> 文件。可以
這樣，
>
	vim ftp://[user@]machine[[:#]portnumber]/path
<
Windows 提供的 ftp (通常在 c:\Windows\System32\ftp.exe) 接受選項 -s:filename
(filename 應該是也必須是完整路徑)，該文件包含 ftp 啟動時自動執行的 ftp 命令。
用這個功能，你可以為一個網站輸入用戶名和密碼: >
	userid
	password
<				*netrw-windows-netrc*  *netrw-windows-s*
如果 |g:netrw_ftp_cmd| 包含 -s:[path/]MACHINE，那麼 (只適用於 Windows)，netrw
會用當前要 ftp 連接的機器名來替代 MACHINE，這樣你就可以有多個 machine.ftp 文
件，包含不同的登錄名和密碼。例如: >

    let g:netrw_ftp_cmd= 'c:\Windows\System32\ftp -s:C:\Users\Myself\MACHINE'
    vim ftp://myhost.somewhere.net/

會使用文件 >

	C:\Users\Myself\myhost.ftp
<
通常，ftp 需要查詢用戶需要的用戶名和密碼。後者通常不會被顯示出來；也就是，輸入
的密碼顯示的是星號。netrw 會保留用戶名和密碼，以便以後從相同機器的讀寫不需要再
提示輸入。

								*netrw-urls*
  +=================================+============================+============+
  |  讀                             | 寫                         |  使用      |
  +=================================+============================+============+
  | DAV:                            |                            |            |
  |  dav://host/path                |                            | cadaver    |
  |  :Nread dav://host/path         | :Nwrite dav://host/path    | cadaver    |
  +---------------------------------+----------------------------+------------+
  | DAV + SSL:                      |                            |            |
  |  davs://host/path               |                            | cadaver    |
  |  :Nread davs://host/path        | :Nwrite davs://host/path   | cadaver    |
  +---------------------------------+----------------------------+------------+
  | FETCH:                          |                            |            |
  |  fetch://[user@]host/path       |                            |            |
  |  fetch://[user@]host:http/path  |  不可用                    | fetch      |
  |  :Nread fetch://[user@]host/path|                            |            |
  +---------------------------------+----------------------------+------------+
  | FILE:                           |                            |            |
  |  file:///*                      | file:///*                  |            |
  |  file://localhost/*             | file://localhost/*         |            |
  +---------------------------------+----------------------------+------------+
  | FTP:          (*3)              |              (*3)          |            |
  |  ftp://[user@]host/path         | ftp://[user@]host/path     | ftp  (*2)  |
  |  :Nread ftp://host/path         | :Nwrite ftp://host/path    | ftp+.netrc |
  |  :Nread host path               | :Nwrite host path          | ftp+.netrc |
  |  :Nread host uid pass path      | :Nwrite host uid pass path | ftp        |
  +---------------------------------+----------------------------+------------+
  | HTTP: wget is executable: (*4)  |                            |            |
  |  http://[user@]host/path        |   不可用                   | wget       |
  +---------------------------------+----------------------------+------------+
  | HTTP: fetch is executable (*4)  |                            |            |
  |  http://[user@]host/path        |   不可用                   | fetch      |
  +---------------------------------+----------------------------+------------+
  | RCP:                            |                            |            |
  |  rcp://[user@]host/path         | rcp://[user@]host/path     | rcp        |
  +---------------------------------+----------------------------+------------+
  | RSYNC:                          |                            |            |
  |  rsync://[user@]host/path       | rsync://[user@]host/path   | rsync      |
  |  :Nread rsync://host/path       | :Nwrite rsync://host/path  | rsync      |
  |  :Nread rcp://host/path         | :Nwrite rcp://host/path    | rcp        |
  +---------------------------------+----------------------------+------------+
  | SCP:                            |                            |            |
  |  scp://[user@]host/path         | scp://[user@]host/path     | scp        |
  |  :Nread scp://host/path         | :Nwrite scp://host/path    | scp  (*1)  |
  +---------------------------------+----------------------------+------------+
  | SFTP:                           |                            |            |
  |  sftp://[user@]host/path        | sftp://[user@]host/path    | sftp       |
  |  :Nread sftp://host/path        | :Nwrite sftp://host/path   | sftp  (*1) |
  +=================================+============================+============+

	(*1) 要指出絕對路徑，用 scp://machine//path。

	(*2) 如果 <.netrc> 存在，假設你的 ftp 客戶端會使用之。不然，該腳本提示
	輸入用戶名和密碼。

	(*3) 對於 ftp，"machine" 可以是 machine#port 或者 machine:port，如果需
	要使用不同於標準 ftp 的端口的話。

	(*4) 對於 http:...，如果 wget 可用，就使用之。不然，如果 fetch 可用，
	就使用之。

:Nread 和 :Nwrite 這幾個 ex 命令都能接受多個文件名。


NETRC							*netrw-netrc*

<.netrc> 文件通常位於你的主目錄，它包含的內容是你想用的和機器名對應的用戶名和
密碼。

<.netrc> 文件典型的語法如下顯示。Unix 上的 ftp 通常支持 <.netrc>；而 Windows
上的 ftp 通常不支持。
>
	machine {full machine name} login {user-id} password "{password}"
	default login {user-id} password "{password}"

你的 ftp 客戶端必須自己會使用 <.netrc>，如果 <.netrc> 文件存在，ftp 傳輸就不會
詢問用戶名字和密碼。

	注意:
	既然這個文件包含密碼明碼，要確保沒人能夠讀到這個文件！許多程序拒絕使用
	能給別人讀取的 .netrc 文件。當然不要忘記，系統管理員總是可以讀到這個文
	件的！為此，對 Linux/Unix 而言: chmod 600 .netrc

雖然 Windows  ftp 客戶端不支持 .netrc，netrw 有一個解決方法: 見
|netrw-windows-s|。

密 碼							*netrw-passwd*

腳本試圖用內建的 Vim 函數 |inputsecret()| 不回顯地讀取 ftp 的密碼。參見
|netrw-userpass| 瞭解如何在設置以後修改密碼。

不幸的是，netrw 沒有辦法自動提供密碼給 scp。所以每次通過 scp 傳輸文件都需要重
新輸入密碼。不過， |netrw-ssh-hack| 有助於解決這個問題。


==============================================================================
5. 激活							*netrw-activate* {{{1

基於網絡的文件傳輸缺省在 |'nocompatible'| 模式打開時就可用。netrw 的腳本文件在
你系統的 plugin、autoload 和 syntax 目錄下，而在啟動 vim 時，只自動加載
plugin/netrwPlugin.vim。netrw 的主要腳本定義在 autoload/netrw.vim 中，它只有在
實際使用 netrw 時才會載入。我建議你至少在 <.vimrc> 定制文件裡放上: >

	set nocp
	if version >= 600
	  filetype plugin indent on
	endif
<
如果在 .vimrc 文件裡也包括以下內容，不帶文件名時啟動 [g]vim 可以立即激活 netrw
以顯示當前目錄: >

	" Augroup VimStartup:
	augroup VimStartup
	  au!
	  au VimEnter * if expand("%") == "" | e . | endif
	augroup END
<

==============================================================================
6. 透明遠程文件編輯				*netrw-transparent* {{{1

透明文件傳輸指通過普通的文件讀寫命令進行的傳輸 (通過 |:autocmd| 的
|BufReadCmd|、|BufWriteCmd| 或 |SourceCmd| 事件)。這樣網絡文件的讀寫或執行就能
和本地文件一樣容易。 >

	vim ftp://[user@]machine/path
	...
	:wq

|netrw-activate| 進一步說明如何讓你的 vim 更好地使用 netrw 這樣的插件。


==============================================================================
7. Ex 命令						*netrw-ex* {{{1

支持普通的讀寫命令。此外，還有一些額外的命令。通常你不需要使用 Nwrite 或
Nread，就像 |netrw-transparent| 演示的那樣 (也就是，用 >
  :e url
  :r url
  :w url
等即可) -- 見 |netrw-urls|。下面的解釋中，{netfile} 指代指向遠程文件的 URL。

						*:Nwrite*  *:Nw*
:[range]Nw[rite]	把特定的行寫到當前由 b:netrw_lastfile 指定的文件裡。
		(相關: |netrw-write|)

:[range]Nw[rite] {netfile} [{netfile}]...
		把特定的行寫到 {netfile} 所指定的網絡文件裡。

						*:Nread*   *:Nr*
:Nr[ead]	從 b:netrw_lastfile 指定的文件裡讀取行到當前的緩衝區。
		(相關: |netrw-read|)

:Nr[ead] {netfile} {netfile}...
		讀取 {netfile} 到當前行之後。

						*:Nsource* *:Ns*
:Ns[ource] {netfile}
		執行 {netfile}。
		啟動 vim 時如要使用遠程的 .vimrc，可以使用如下 (都在同一行上)
		(多謝 Antoine Mechelynck) 的命令 >
		vim -u NORC -N
		 --cmd "runtime plugin/netrwPlugin.vim"
		 --cmd "source scp://HOSTNAME/.vimrc"
<		(相關: |netrw-source|)

:call NetUserPass()				*NetUserPass()*
		如果 g:netrw_uid 和 s:netrw_passwd 不存在，該函數向用戶查詢。
		(相關: |netrw-userpass|)

:call NetUserPass("userid")
		該調用設置 g:netrw_uid 並且，如果密碼不存在的話，向用戶查詢。
		(相關: |netrw-userpass|)

:call NetUserPass("userid","passwd")
		該調用設置 g:netrw_uid 和 s:netrw_passwd。用戶名和密碼則被 ftp
		傳輸使用。要刪除用戶名和密碼，只用使用空字符串 (即 "") 便可。
		(相關: |netrw-userpass|)

:NetrwSettings  |netrw-settings| 裡描述此命令 -- 用於顯示 netrw 設置和修改
		netrw 行為。


==============================================================================
8. 變量和選項				*netrw-var* *netrw-settings* {{{1

(另見: |netrw-options| |netrw-variables| |netrw-protocol|
       |netrw-browser-settings| |netrw-browser-options| )

<netrw.vim> 腳本提供若干變量，作為控制 <netrw.vim> 行為的選項。這些變量通常在
用戶的 <.vimrc> 裡設置: (另見: |netrw-settings| |netrw-protocol|)
						*netrw-options*
>
			-------------
			 netrw 選項
			-------------
	選項			含義
	--------------		-----------------------------------------------
<
        b:netrw_col             保存當前的列號 (NetWrite 時)
        g:netrw_cygwin          =1 假設在 windows 上的 scp 是 cygwin 的版本
                                                        (windows 的缺省值)
                                =0 假設在 windows 上的 scp 接受 windows 風格的
                                   路徑                 (其他情況的缺省值)
        g:netrw_ftp             =0 使用缺省的 ftp       (uid password)
                                =1 使用替代的 ftp       (user uid password)
                                (見 |netrw-options|)
        g:netrw_ftpmode         ="binary"               (缺省)
                                ="ascii"                (你的選擇)
        g:netrw_ignorenetrc     = 1                     (缺省)
                                    如果你有 <.netrc> 文件，但是你不想用它，就
                                    這麼設置。它唯一的作用是使得 <.netrc> 被忽
                                    略。
        b:netrw_lastfile        最近一次通過網絡讀寫的方法/機器/路徑。
        b:netrw_line            保存當前的行號          (NetWrite 時)
        g:netrw_silent          =0 正常方式的傳輸
                                =1 安靜方式的傳輸
        g:netrw_uid             保存當前 ftp 的 user-id。
        g:netrw_use_nt_rcp      =0 不要使用 WinNT/2K/XP 的 rcp (缺省)
                                =1 使用 WinNT/2K/XP 二進制模式的 rcp
        g:netrw_win95ftp        =0 使用 unix 風格連接 ftp，即使 win95/98/ME 等
                                =1 使用缺省的方法連接 ftp >
	-----------------------------------------------------------------------
<
						*netrw-internal-variables*
腳本裡也可以使用以下的內部變量，儘管應該是暫時的。
>
				--------
				臨時變量
				--------
	選項			含義
	--------------		--------------------------------
<
	b:netrw_method		指明 rcp/ftp+.netrc/ftp 等的索引
	w:netrw_method		(同 b:netrw_method)
	g:netrw_machine		保存輸入分析結果的機器名
	b:netrw_fname		保存訪問的文件名 >
	--------------------------------------------------------
<
							*netrw-protocol*
netrw 支持若干協議。調用這些協議時使用下面的列出的變量，用戶可以修改。
>
			   	------------
                                協議控制選項
				------------
    選項	      類型	  設置	  	  意義
    ---------	      --------	  --------------  ---------------------------
<    netrw_ftp         變量        =不存在         userid 由 "user userid" 設置
                                  =0              userid 由 "user userid" 設置
                                  =1              userid 由 "userid" 設置
    NetReadFixup      函數        =不存在         沒有改變
                                  =存在           允許用戶通過 ftp 自動傳輸的
                                                  文件通過 NetReadFixUp() 進行
                                                  轉換
    g:netrw_dav_cmd      變量  ="cadaver"      如果 cadaver 可執行
    g:netrw_dav_cmd      變量  ="curl -o"      否則如果 curl 可執行
    g:netrw_fetch_cmd    變量  ="fetch -o"     如果 fetch 可以執行
    g:netrw_ftp_cmd      變量  ="ftp"
    g:netrw_http_cmd     變量  ="fetch -o"     如果       fetch 可以執行
    g:netrw_http_cmd     變量  ="wget -O"      不然，如果 wget  可以執行
    g:netrw_http_put_cmd 變量  ="curl -T"
    g:netrw_list_cmd     變量  ="ssh USEPORT HOSTNAME ls -Fa"
    g:netrw_rcp_cmd      變量  ="rcp"
    g:netrw_rsync_cmd    變量  ="rsync -a"
    g:netrw_scp_cmd      變量  ="scp -q"
    g:netrw_sftp_cmd     變量  ="sftp" >
    -------------------------------------------------------------------------
<
								*netrw-ftp*
g:netrw_..._cmd 選項  (|g:netrw_ftp_cmd| 和 |g:netrw_sftp_cmd|) 指定如何處理特
定的協議 (rcp、ftp 等) 的外部程序，也可以包含需要的命令行選項 (如指定 passive
模式的 -p)。例如: >

	let g:netrw_ftp_cmd= "ftp -p"
<
|g:netrw_list_cmd| 提供瀏覽支持: 其中的 HOSTNAME 子串會被替代為當前請求的機器
名。

兩個選項 (|g:netrw_ftp| 和 |netrw-fixup|) 都提供解決特定 ftp 問題的幫助。為了
更好的理解如何在 ftp 有問題的時候使用這些選項，以下是 netrw 如何進行 ftp 讀取
的一點討論。

對於 ftp，netrw 通常用以下幾種格式之一構造命令行，並寫到臨時文件裡:
>
  如果 g:netrw_ftp 不存在或者不是 1      如果 g:netrw_ftp 存在且為 1
  ----------------------------------     ------------------------------
<
       open machine [port]                    open machine [port]
       user userid password                   userid password
       [g:netrw_ftpmode]                      password
       [g:netrw_ftpextracmd]                  [g:netrw_ftpmode]
       get filename tempfile                  [g:netrw_extracmd]
                                              get filename tempfile >
  ---------------------------------------------------------------------
<
|g:netrw_ftpmode| 和 |g:netrw_ftpextracmd| 是可選的。

netrw 然後通過過濾命令執行上述命令行:
>
	:%! {g:netrw_ftp_cmd} -i [-n]
<
其中
	g:netrw_ftp_cmd 通常是 "ftp"，
	-i 告訴 ftp 不要交互
	-n 意味著不要用 netrc，它用於方法 #3 (ftp 不用 <.netrc>)

如果 <.netrc> 存在，就不需要想用戶查詢用戶名和密碼。傳輸完畢後，保存文件到臨時
文件裡。這時，從臨時文件裡讀取的內容被讀到被請求的主編輯會話窗口中，並刪除臨時
文件。

如果你的 ftp 不支持 "user" 命令，而是立即需要輸入用戶名，那麼試試把
"let netrw_ftp=1" 放到你的 <.vimrc> 裡。

								*netrw-cadaver*
要解決不受信任的服務器彈出 SSL 認證對話框的問題，你可以下載該認證，並把它放到
/usr/ssl/cert.pem 裡。此操作使該服務器被認為是 "可信任的"。

						*netrw-fixup* *netreadfixup*
如果你的 ftp 因某種原因產生不需要的行 (例如 AUTH 消息)，你需要寫一個
NetReadFixup() 函數:
>
    function! NetReadFixup(method,line1,line2)
      " a:line1: 當前文件的第一行新行
      " a:line2: 當前文件的最後一行新行
      if     a:method == 1 "rcp
      elseif a:method == 2 "ftp + <.netrc>
      elseif a:method == 3 "ftp + machine,uid,password,filename
      elseif a:method == 4 "scp
      elseif a:method == 5 "http/wget
      elseif a:method == 6 "dav/cadaver
      elseif a:method == 7 "rsync
      elseif a:method == 8 "fetch
      elseif a:method == 9 "sftp
      else                 " 報錯
      endif
    endfunction
>
如果 NetReadFixup() 函數存在，它就會被調用，這樣你就可以訂製自己的讀取進程。一
個進一步的例子可以看看 <netrw.vim> 如何處理 Windows 95 ftp 的函數。不知何種原
因，Windows 95 的 ftp 在傳輸結束以後加了四個空行，所以應該自動把它們刪除。這裡
是 <netrw.vim> 自己的一些代碼:
>
    if has("win95") && g:netrw_win95ftp
     fun! NetReadFixup(method, line1, line2)
       if method == 3   " ftp (無 <.netrc>)
        let fourblanklines= line2 - 3
        silent fourblanklines.",".line2."g/^\s*/d"
       endif
     endfunction
    endif
>
(相關主題: |ftp| |netrw-userpass| |netrw-start|)

==============================================================================
9. 瀏覽			*netrw-browsing* *netrw-browse* *netrw-help* {{{1
   			*netrw-browser*  *netrw-dir*    *netrw-list*

瀏 覽 簡 介					*netrw-intro-browse* {{{2
	(快速參考: |netrw-quickmaps| |netrw-quickcoms|)

netrw 支持本地系統和遠端機器上的目錄瀏覽；瀏覽包括列出文件和目錄、進入目錄、編
輯那裡的文件、刪除文件/目錄、建立新目錄和移動 (換名) 文件和目錄，複製文件和目
錄，等等。還可以對文件進行標記，並對標記的文件執行任何系統命令！netrw 瀏覽器實
現以前探索器裡的映射和命令的更一般的版本以支持遠程目錄，不過具體細節 (比如使用
的全局變量名) 肯定有所不同。要瀏覽一個目錄，簡單地 "編輯" 之便可！ >

	vim /your/directory/
	vim .
	vim c:\your\directory\
<
(相關主題: |netrw-cr|  |netrw-o|  |netrw-p| |netrw-P| |netrw-t|
           |netrw-mf|  |netrw-mx| |netrw-D| |netrw-R| |netrw-v| )


netrw 遠程文件和目錄瀏覽器能處理兩個協議: ssh 和 ftp。url 如果使用 ftp 協議，
netrw 遠程瀏覽時就同時使用 ftp。相反，如果指定其它協議，該協議將用於文件傳輸，
而 ssh 協議會被用來進行遠程瀏覽。

要使用 netrw 的遠程目錄瀏覽器，只要讀入帶拖尾斜槓的 "文件" 就可以，它被解釋為
列出目錄的請求:
>
	vim [protocol]://[user@]hostname/path/
<
其中 [protocol] 一般是 scp 或 ftp。例如: >

	vim ftp://ftp.home.vim.org/pub/vim/
<
對於本地目錄，拖尾的斜槓是不必要的。不過因為很容易忘記，這裡不厭其煩再重複一
遍: 要瀏覽遠程目錄，url 必須以斜槓結尾！

如果要避免 ssh 或 scp 在遠程目錄列表時反覆輸入密碼的麻煩，見
|netrw-ssh-hack|。要避免 ftp 密碼的輸入，見 |netrw-netrc| (如果你的 ftp 支持的
話)。

改變瀏覽器顯示文件的方式有以下幾個途徑:

	* 要改變列表風格，按 "i" 鍵 (|netrw-i|)。
	  目前支持四種風格: 瘦、長、寬和樹狀。
	  要使改變永久化，見 |g:netrw_liststyle|。

	* 要隱藏文件 (不想再顯示那些 xyz~ 文件？) 見 |netrw-ctrl-h|。

	* 按 s 來對文件按名字、時間或大小排序。

要知道 netrw 可以做的一切事情，見 |netrw-browse-cmds|！

			*netrw-getftype* *netrw-filigree* *netrw-ftype*
在列出本地文件時，|getftype()| 函數被用來加上一個附綴，來表示文件類型:

	directory  : /
	executable : *
	fifo       : |
	links      : @
	sockets    : =

附綴也影響 |g:netrw_sort_sequence|。


快 速 幫 助						*netrw-quickhelp* {{{2
                       (按 ctrl-] 可選擇主題)~
	瀏覽簡介........................................|netrw-intro-browse|
	  快速參考: 映射................................|netrw-quickmap|
	  快速參考: 命令................................|netrw-browse-cmds|
	隱藏
	  編輯隱藏列表..................................|netrw-ctrl-h|
	  隱藏文件或目錄................................|netrw-a|
	  按後綴隱藏或顯示..............................|netrw-mh|
	  隱藏點文件....................................|netrw-gh|
	列表風格
	  選擇列表風格 (瘦/長/寬/樹狀)..................|netrw-i|
	  相關的設置變量................................|g:netrw_liststyle|
	  執行列表的外殼命令............................|g:netrw_list_cmd|
	  快速文件信息..................................|netrw-qf|
	如何排序
	  選擇排序風格 (名字/時間/大小).................|netrw-s|
	  編輯排序序列..................................|netrw-S|
	  排序選項......................................|g:netrw_sort_options|
	  相關的設置變量................................|g:netrw_sort_sequence|
	  反轉排序順序..................................|netrw-r|


				*netrw-quickmap* *netrw-quickmaps*
快 速 參 考 : 映 射				*netrw-browse-maps* {{{2
>
	  ----			--------				----
	  映射			簡要解釋				鏈接
	  ----			--------				----
<	 <F1>	netrw 給出幫助
	 <cr>	netrw 進入目錄或者打開文件                           |netrw-cr|
	 <del>	netrw 試圖刪除文件/目錄                              |netrw-del|
	 <c-h>	編輯文件隱藏列表                                     |netrw-ctrl-h|
	 <c-l>	netrw 刷新目錄列表                                   |netrw-ctrl-l|
	 <c-r>	使用 gvim 服務器瀏覽                                 |netrw-ctrl-r|
	 <c-tab> 收縮/打開 netrw/explore 窗口                        |netrw-c-tab|
	   -	netrw 往上一層目錄                                   |netrw--|
	   a	切換普通顯示方式、                                   |netrw-a|
		隱藏方式 (不顯示匹配 g:netrw_list_hide 的文件) 和
		顯示方式 (只顯示匹配 g:netrw_list_hide 的文件)
	   c	使瀏覽中的目錄成為當前目錄                           |netrw-c|
	   C	設置編輯窗口                                         |netrw-C|
	   d	建立新目錄                                           |netrw-d|
	   D	試圖刪除文件/目錄                                    |netrw-D|
	   gb	切換到收入書籤的目錄                                 |netrw-gb|
	   gd	強製作目錄處理                                       |netrw-gd|
	   gf	強製作文件處理                                       |netrw-gf|
	   gh	快速隱藏/顯示點文件                                  |netrw-gh|
	   gn	置頂光標下的目錄                                     |netrw-gn|
	   i	在瘦、長、寬和樹狀列表方式循環                       |netrw-i|
	   mb	把當前目錄加入書籤                                   |netrw-mb|
	   mc	把帶標記文件複製到標記目標目錄中                     |netrw-mc|
	   md	對帶標記文件進行比較 (不超過 3 個)                   |netrw-md|
	   me	把帶標記文件放到參數列表中並編輯之                   |netrw-me|
	   mf	標記文件                                             |netrw-mf|
	   mF	撤銷文件標記                                         |netrw-mF|
	   mg	給帶標記文件應用 vimgrep                             |netrw-mg|
	   mh	切換帶標記文件的後綴在隱藏列表中的存在與否           |netrw-mh|
	   mm	把帶標記文件移動到標記目標目錄中                     |netrw-mm|
	   mp	打印帶標記文件                                       |netrw-mp|
	   mr	用外殼風格的 |regexp| 標記文件	                      |netrw-mr|
	   mt	使當前瀏覽目錄成為標記文件的目標目錄                 |netrw-mt|
	   mT	對帶標記文件應用 ctags                               |netrw-mT|
	   mu	撤銷所有帶標記文件的標記                             |netrw-mu|
	   mv	對帶標記文件應用任意 vim  命令                       |netrw-mv|
	   mx	對帶標記文件應用任意 外殼 命令                       |netrw-mx|
	   mx	對帶標記文件整塊應用任意外殼命令                     |netrw-mX|
	   mz	對帶標記文件壓縮/解壓縮                              |netrw-mz|
	   o	用水平分割在新瀏覽窗口中進入光標所在的文件/目錄      |netrw-o|
	   O	獲取光標指定的文件                                   |netrw-O|
	   p	預覽文件                                             |netrw-p|
	   P	在前次使用的窗口中瀏覽                               |netrw-P|
	   qb	列出書籤內的目錄和歷史                               |netrw-qb|
	   qf	顯示文件信息                                         |netrw-qf|
	   qF	用 quickfix 列表標記文件                             |netrw-qF|
	   qL	用 |location-list| 標記文件                            |netrw-qL|
	   r	反轉排序順序                                         |netrw-r|
	   R	給指定的文件或目錄換名                               |netrw-R|
	   s	選擇排序風格: 按名字、時間或文件大小                 |netrw-s|
	   S	指定按名排序時的後綴優先級                           |netrw-S|
	   t	在新標籤頁裡進入光標所在的文件/目錄                  |netrw-t|
	   u	切換到較早訪問的目錄                                 |netrw-u|
	   U	切換到較遲訪問的目錄                                 |netrw-U|
	   v	用垂直分割在新瀏覽窗口中進入光標所在的文件/目錄      |netrw-v|
	   x	用指定程序閱讀文件                                   |netrw-x|
	   X	用 |system()| 執行光標所在的文件                       |netrw-X|

	   %	在 netrw 當前目錄打開新文件                          |netrw-%|

	*netrw-mouse* *netrw-leftmouse* *netrw-middlemouse* *netrw-rightmouse*
	<leftmouse>	(僅限於 gvim) 選擇鼠標所在的單詞，就像按了 <cr> 一樣
			(即編輯文件、改變目錄)
	<middlemouse>	(僅限於 gvim) 等價於鼠標所在的單詞上按 P；見 |netrw-P|
	<rightmouse>	(僅限於 gvim) 刪除鼠標所在的文件/目錄
	<2-leftmouse>	(僅限於 gvim) 當:
			 * 在 netrw 選擇的文件中，_且_
			 * |g:netrw_retmap| == 1    _且_
			 * 用戶沒有在 netrw 自動載入之前已經定義 <2-leftmouse>
			   映射，
			那麼雙擊鼠標左鍵返回到 netrw 瀏覽器窗口。見
			|g:netrw_retmap|。
	<s-leftmouse>	(僅限於 gvim) 等價於 mf，標記文件。拖動按住 shift 的
			鼠標左鍵可以標記多個文件。(見 |netrw-mf|)

	(瀏覽時要禁用鼠標鍵: |g:netrw_mousemaps|)

				*netrw-quickcom* *netrw-quickcoms*
快 速 參 考 : 命 令		*netrw-explore-cmds* *netrw-browse-cmds* {{{2
     :NetrwClean[!]............................................|netrw-clean|
     :NetrwSettings............................................|netrw-settings|
     :Explore[!]  [dir] 探索當前文件所在的目錄.................|netrw-explore|
     :Hexplore[!] [dir] 水平分割並探索.........................|netrw-explore|
     :Lexplore[!] [dir] 切換左瀏覽器...........................|netrw-explore|
     :Nexplore[!] [dir] 垂直分割並探索
                        (譯者注: 應為轉到下一個匹配的文件).....|netrw-explore|
     :Pexplore[!] [dir] 垂直分割並探索
                        (譯者注: 應為轉到前一個匹配的文件).....|netrw-explore|
     :Rexplore          返回瀏覽器.............................|netrw-explore|
     :Sexplore[!] [dir] 分割並探索目錄.........................|netrw-explore|
     :Texplore[!] [dir] 建立新標籤頁並探索.....................|netrw-explore|
     :Vexplore[!] [dir] 垂直分割並探索.........................|netrw-explore|


顯 示 橫 幅						*netrw-I*

按 "I" 可以切換橫幅顯示的打開與關閉。

另見: |g:netrw_banner|


把 目 錄 加 入 書 簽	*netrw-mb* *netrw-bookmark* *netrw-bookmarks* {{{2

用下面的命令可以很方便地把當前瀏覽目錄加入 "書籤" >

	mb
<
								*.netrwbook*
書籤可以跨會話使用，因為它們被保存在 $HOME/.netrwbook 文件裡，並經排序。

如果有帶標記的文件和/或目錄，mb 會把它們加入書籤列表。

*netrw-:NetrwMB*
另外，可用 :NetrwMB 來把文件或目錄加入書籤。 >

	:NetrwMB[!] [files/directories]

< 沒有 !: 把文件/目錄加入 netrw 的書籤系統

   沒有參數並且在 netrw 緩衝區裡:
     如果有帶標記的文件               : 把帶標記的文件加入書答
     否則                             : 把光標下的文件加入書答
   沒有參數並且不在 netrw 緩衝區裡    : 把當前打開的文件加入書答
   有參數                             : 對每個參數用 |glob()| 展開並加入書籤

 帶有 !: 從 netrw 的書籤系統裡刪除文件/目錄

:NetrwMB 命令可在 netrw 緩衝區之外使用 (一旦在會話中激活了 netrw)。

".netrwbook" 文件用來在 netrw (和 vim) 未激活時記錄書籤。缺省，它保存在用戶
|'runtimepath'| 的第一個目錄裡。

相關主題:
	|netrw-gb| 如果回到 (go) 書籤
	|netrw-mB| 如何刪除書籤
	|netrw-qb| 如何列出書籤
	|g:netrw_home| 控制 .netrwbook 保存的位置


瀏 覽						*netrw-enter*	*netrw-cr* {{{2


瀏覽很簡單: 移動光標到感興趣的文件或目錄上，按 <cr> (回車鍵) 就可以選擇該文件
或目錄。如果還是目錄，列出其內容，如果是文件，使用原來讀請求中給出的協議來打開
該文件。

  警 告: 有四種列表的形式 (見 |netrw-i|)。netrw 假設兩個或更多的空格定界長列表
  和寬列表格式下的文件和目錄名。所以如果你的文件或目錄名本身內嵌或拖尾兩個或更
  多的空格，用 "瘦" 格式來選擇文件。

|g:netrw_browse_split| 選項缺省為零。可以修改它，使文件的打開在新窗口或標籤頁
裡進行。如果該選項為一，分割會以水平方式進行，如果為二，分割以垂直方式進行。如
果為三，<cr> 使得文件在新標籤頁裡出現。


如果是用圖形界面 (gvim)，可以按 <leftmouse> 選擇文件。此外，如果

 * |g:netrw_retmap| == 1    _且_ (其缺省值為 0)
 * 在 netrw 選擇的文件中，_且_
 * 用戶沒有在 netrw 載入之前已經定義 <2-leftmouse> 映射

那麼雙擊鼠標左鍵返回到 netrw 瀏覽器窗口。

為了試圖加快瀏覽速度，尤其是可能需要輸入密碼的遠程瀏覽速度，netrw 會保留和重用
上次得到的目錄列表緩衝區。|g:netrw_fastbrowse| 變量控制此行為；可以選擇慢速瀏
覽 (沒有目錄緩衝區列表重用)，中速瀏覽 (只對遠程目錄重用目錄緩衝區列表) 和快速
瀏覽 (盡可能重用目錄緩衝區列表)。重用的代價是如果發生了改動 (例如在目錄中出現
了新文件)，列表就可能不是最新的。此時，按 ctrl-L 可以刷新目錄列表緩衝區 (見
|netrw-ctrl-l|)。

								*netrw-s-cr*
壓縮當前樹列表目錄~

如果打開樹列表風格 (見 |netrw-i|) 並且使用 gvim，<s-cr> 映射可用來壓縮 (關閉)
光標所在的目錄。

否則，可以重新映射用戶自己選擇的鍵組合來達到同樣的效果: >

    nmap <buffer> <silent> <nowait> YOURKEYCOMBO  <Plug>NetrwTreeSqueeze
<
把此行放在$HOME/ftplugin/netrw/netrw.vim 裡；必須只為 netrw 緩衝區而生成。

相關主題:
	|netrw-ctrl-r|	|netrw-o|	|netrw-p|
	|netrw-P|	|netrw-t|	|netrw-v|
相關設置變量:
   |g:netrw_browse_split|	|g:netrw_fastbrowse|
   |g:netrw_ftp_list_cmd|	|g:netrw_ftp_sizelist_cmd|
   |g:netrw_ftp_timelist_cmd|	|g:netrw_ssh_browse_reject|
   |g:netrw_ssh_cmd|		|g:netrw_use_noswf|


水 平 分 割 窗 口 方 式 瀏 覽			*netrw-o* *netrw-horiz* {{{2

通常用 <cr> 方式進入文件或目錄。不過，"o" 映射可以打開新窗口來瀏覽新目錄列表或
文件。這裡使用水平分割。(垂直分割可見 |netrw-v|)

通常，o 鍵水平分割窗口並使新窗口和光標出現在上方。

相關設置變量: |g:netrw_alto| |g:netrw_winsize|

相關主題:
	|netrw-ctrl-r|	|netrw-o|	|netrw-p|
	|netrw-P|	|netrw-t|	|netrw-v|
相關設置變量:
   |g:netrw_alto|    控制上/下分割
   |g:netrw_winsize| 控制初始大小

在 新 標 簽 頁 裡 瀏 覽				*netrw-t* {{{2

通常你用 <cr> 進入文件或目錄。"t" 映射允許你在新標籤頁裡打開新的目錄列表或文
件。

如果你希望在背景標籤頁裡顯示新列表，用 |gT|。

相關主題:
	|netrw-ctrl-r|	|netrw-o|	|netrw-p|
	|netrw-P|	|netrw-t|	|netrw-v|
相關設置變量:
   |g:netrw_winsize| 控制初始大小

垂 直 分 割 窗 口 方 式 瀏 覽				*netrw-v* {{{2

通常用 <cr> 方式進入文件或目錄。不過，"v" 映射可以打開新窗口來瀏覽新目錄列表或
文件。這裡使用垂直分割。(水平分割可見 |netrw-o|)

通常，v 鍵垂直分割窗口並使新窗口和光標出現在左方。

只能有一個樹狀列表的緩衝區；因而，在子目錄上按 "v" 會分割屏幕，但顯示相同的緩
沖區兩遍。

相關主題:
	|netrw-ctrl-r|	|netrw-o|	|netrw-p|
	|netrw-P|	|netrw-t|	|netrw-v|
相關設置變量:
   |g:netrw_altv|    控制右/左分割
   |g:netrw_winsize| 控制初始大小


用 GVIM 服 務 器 瀏 覽				*netrw-ctrl-r* {{{2

可以建立瀏覽專用的 gvim，和用來編輯的 gvim 區隔。netrw 瀏覽器上對文件 (不是目
錄) 用 <c-r> 映射，會使用 gvim 服務器 (見 |g:netrw_servername|)。後續的 <cr>
(見 |netrw-cr|) 會重用該服務器來編輯文件。

相關主題:
	|netrw-ctrl-r|	|netrw-o|	|netrw-p|
	|netrw-P|	|netrw-t|	|netrw-v|
相關設置變量:
	|g:netrw_servername|   : 設置服務器名
	|g:netrw_browse_split| : 控制 <cr> 如何打開文件


改 變 列 表 方 式 (瘦 長 寬 樹)					*netrw-i* {{{2

"i" 映射在瘦、長、寬和樹形列表格式之間循環。

瘦列表格式只給出文件和目錄名。

對於遠程目錄，長格式基於通過 ssh 執行的 "ls" 命令結果，對於本地目錄，則顯示文
件名、文件大小 (字節計) 和最近修改日期和時間。使用長格式時，netrw 不能識別帶拖
尾空格的文件名。這樣的文件只能用瘦列表格式。

寬列表格式使用兩個或多個連續的空格來給文件名定界；使用此格式時，netrw 不能識別
內嵌或拖尾帶有兩個或多個連續的空格的文件名。不過，瘦格式可以處理這些文件。這種
寬列表方式最為緊湊。

樹形列表格式列出頂層目錄，然後是文件和目錄，它們的前面有一個或多個 "|"，指示目
錄深度。可以在目錄名上按 <cr> 來打開或關閉目錄。

可以設置缺省的列表方式: 見 |g:netrw_liststyle|。例如可在 .vimrc 中加入 >
	let g:netrw_liststyle= 3
樹形列表就成為缺省方式了。

一個使用 netrw 樹形顯示的典型方式是: >

	vim .
	(反覆按 i 直到樹形顯示出現)
	找到一個文件
	v  (垂直分割窗口並編輯文件)
	ctrl-w h  (回到 netrw 列表)
	P (在前次窗口編輯新選文件)
	ctrl-w h  (回到 netrw 列表)
	P (在前次窗口編輯新選文件)
	...等等...
<
相關設置變量: |g:netrw_liststyle| |g:netrw_maxfilenamelen|
              |g:netrw_timefmt|   |g:netrw_list_cmd|


改 變 文 件 權 限						*netrw-gp* {{{2

"gp" 會詢問光標所在文件的新權限。目前，只適用於本地文件。

相關設置變量: |g:netrw_chgperm|


切 換 到 收 入 書 簽 的 目 錄                   	*netrw-gb*  {{{2

要切換回收入書籤的目錄，用 >

	{cnt}gb

可以使用計數來引用任何書籤項目。
注意 |netrw-qb| 同時顯示書籤和歷史；要轉到歷史的某個位置，見 |netrw-u| 和
|netrw-U|。

相關主題:
	|netrw-mB| 如何刪除書籤
	|netrw-mb| 如何建立書籤
	|netrw-qb| 如何列出書籤


切 換 到 較 早 訪 問 的 目 錄			*netrw-u* *netrw-updir* {{{2

每次你切換到新目錄時 (當前會話裡新出現)，netrw 會把該目錄保存在最近訪問過的目
錄歷史列表裡 (除非 |g:netrw_dirhistmax| 為零；缺省該值為 10)。用 "u" 映射可以
切換到較早訪問的目錄 (前任)。相反的操作見 |netrw-U|。

"u" 映射也接受計數，回到若干個位置前的歷史。為你方便起見，qb (見 |netrw-qb|)
列出歷史編號，可用於此處的計數。

						*.netrwhist*
參見 |g:netrw_dirhistmax|，說明如何控制保存的歷史總數。".netrwhist" 文件在
netrw (和 vim) 未激活時記錄歷史。它缺省存放在用戶 |'runtimepath'| 的第一個目錄
裡。

相關主題:
	|netrw-U| 切換到較遲訪問的目錄
	|g:netrw_home| 控制 .netrwhist 何處存放

切 換 到 較 遲 訪 問 的 目 錄			*netrw-U* *netrw-downdir* {{{2

用 "U" 映射可以切換到較遲訪問的目錄 (後任)。和 "u" 映射相反。(見 |netrw-u|)
用 qb 映射可以同時列出書籤和歷史。(見 |netrw-qb|)

"U" 映射也接受計數，回到若干個位置後的歷史。

參見 |g:netrw_dirhistmax|，說明如何控制保存的歷史總數。


更 改 樹 置 頂 目 錄			*netrw-ntree*  *:Ntree*  *netrw-gn* {{{2

可以為樹列表指定新的樹置頂目錄 >

	:Ntree [dirname]

如果沒有 "dirname"，使用當前行 (跳過開頭的深度信息)。
如果有 "dirname"，使用指定的目錄名。

"gn" 映射獲取光標下的單詞並用之改變樹列表的置頂。


NETRW 清 理					*netrw-clean* *:NetrwClean* {{{2

使用 NetrwClean 可以很容易地從用戶主目錄中刪除 netrw；更準確的說，從
|'runtimepath'| 的第一個目錄中刪除之。

使用 NetrwClean! 則會從 |'runtimepath'| 的所有目錄中刪除。當然，你必須要有正確
的寫入/刪除權限才能這麼做。

不管哪種形式，netrw 都會先確認你是否真的要這麼做。如果 netrw 沒有權限刪除某文
件，它會報錯。

						*netrw-gx*
通 過 特 殊 處 理 程 序 定 制 瀏 覽		*netrw-x* *netrw-handler* {{{2
						(另見 |netrw_filehandler|)

html、gif、jpeg、(word/office) 文檔等若干類型的文件最好用特殊處理程序 (也即，
你機器的操作系統上的特定工具程序) 來察看。netrw 允許你調用這些特殊的處理程
序: >

	* 探索時，按 "x" 鍵
	* 編輯時，在光標所在的特殊文件名上按 gx
<	  (|g:netrw_nogx| 變量存在時後者不可用)

netrw 用下面的方法決定使用哪個特殊處理程序:

  * 如果存在 |g:netrw_browsex_viewer|，嘗試用它來察看文件。包含可用設置的示例
    (把它放在 <.vimrc> 裡): >

	:let g:netrw_browsex_viewer= "kfmclient exec"
<   或 >
	:let g:netrw_browsex_viewer= "xdg-open"
<
    如果 g:netrw_browsex_viewer == '-'，那麼取而代之的是調用
    netrwFileHandlers#Invoke() (見 |netrw_filehandler|)。

  * 對 Windows 32 或 64 來說，使用 url 和 FileProtocolHandler dll。
  * 對 Gnome (帶 gnome-open) 來說: 使用 gnome-open。
  * 對 KDE (帶 kfmclient) 來說: 使用 kfmclient。
  * 對 Mac OS X 來說: 使用 open。
  * 否則，使用 netrwFileHandler 插件。

這些方法使用文件的後綴名來決定 "處理" 這些文件的合適的應用程序。這樣就可以處理
OpenOffice (*.sfx)、可視文件 (*.jpg、*.gif 等) 和 PostScript (*.ps、 *.eps)。

gx 映射延伸到所有緩衝區；在單詞上應用 "gx" 使用 netrw 在其上使用特殊處理程序
(就像在 netrw 緩衝區裡使用 "x" 一樣)。也可用可視模式 (見 |visual-start|) 選擇
文本來應用特殊處理程序。通常，gx 使用 expand("<cfile>") 來獲取光標下的文本；
通過 |g:netrw_gx| 變量可以改變 |expand()| 使用的參數。此外，也可用可視選擇 (見
|visual-block|) 來選擇 gx 使用的文本，或改變 |'isfname'| 選項 (全局選項，所以
netrw 不直接修改)。

相關設置變量:
	|g:netrw_gx|	控制 gx 如何獲取光標下的文本
	|g:netrw_nogx|	編輯時屏蔽 gx 映射
	|g:netrw_suppress_gx_mesg| 控制 gx 對瀏覽器消息的抑制

							*netrw_filehandler*

|g:netrw_browsex_viewer| 如果存在且為 "-"，netrw 試圖通過 vim 函數來處理特殊文
件。"x" 映射根據文件擴展名來對文件應用一個函數。當然能夠調用的前提是該處理函數
本身必須已經存在！
>
 例如 mypgm.html  x -> NFH_html("scp://user@host/some/path/mypgm.html")

<	用戶可以編寫他們自己的 netrw 文件處理函數來對更多後綴進行特殊處理。參
	見 <autoload/netrwFileHandlers.vim> 的例子來瞭解如何建立文件處理函數。
	例如: >

	" NFH_suffix(filename)
	fun! NFH_suffix(filename)
	..對文件名進行特殊處理..
	endfun
<
這些函數需要在你的 .vim/plugin (vimfiles\plugin) 目錄下的某個文件裡定義。Vim
的函數名不能包含標點符號 (除了下劃線以外)。要支持包含這類字符的後綴，netrw 會
先按照下表對後綴進行轉換: >

    @ -> AT       ! -> EXCLAMATION    % -> PERCENT
    : -> COLON    = -> EQUAL          ? -> QUESTION
    , -> COMMA    - -> MINUS          ; -> SEMICOLON
    $ -> DOLLAR   + -> PLUS           ~ -> TILDE
<
因而，對於下例: >

	file.rcs,v  ->  NFH_rcsCOMMAv()
<
如果你需要更多的轉換，請給我發電子郵件: >
		NdrOchip at ScampbellPfamily.AbizM - NOSPAM
提出要求。

相關設置變量: |g:netrw_browsex_viewer|

刪 除 書 簽						*netrw-mB* {{{2

要刪除書籤，用 >

	{cnt}mB

如果有帶標記的文件，mB 會從書籤列表中刪除之 。

此外，還可用 :NetrwMB! (見 |netrw-:NetrwMB|)。 >

	:NetrwMB! [文件/目錄]

相關主題:
	|netrw-gb| 如何回到 (go) 書籤
	|netrw-mb| 如何建立書籤
	|netrw-qb| 如何列出書籤

刪 除 文 件 或 目 錄		*netrw-delete* *netrw-D* *netrw-del* {{{2

如果沒有用 |netrw-mf| 標記過文件:   (局部標記文件列表)

    文件和目錄的刪除涉及如下操作: 移動光標到要刪除的文件/目錄，然後按 "D"。目
    錄必須為空才能成功刪除。如果所謂的目錄是指向目錄的軟鏈接。要成功刪除該目
    錄，netrw 需要發出兩個請求。刪除前 netrw 會給出確認。用 "V" 命令 (可視選
    擇) 然後按 "D" 可以選擇行範圍。

如果用 |netrw-mf| 標記過文件:   (局部標記文件列表)

    帶標記文件 (含空目錄) 會被刪除；還是一樣，在實際操作之前，你會被詢問以確認
    刪除動作。

進一步，可以刪除匹配模式的文件。

    * 用 :MF 模式 (見 |netrw-:MF|)；然後按 "D"。

    * 用 mr (見 |netrw-mr|) 提示你輸入模式。使得匹配文件被標記。然後按 "D"。

|g:netrw_rm_cmd|、|g:netrw_rmf_cmd| 和 |g:netrw_rmdir_cmd| 變量用以控制如何刪
除遠程的文件和目錄。g:netrw_rm_cmd 用於文件，缺省值為:

	g:netrw_rm_cmd: ssh HOSTNAME rm

:netrw_rmdir_cmd 變量用於刪除目錄。缺省值為:

	|g:netrw_rmdir_cmd|: ssh HOSTNAME rmdir

如果用 g:netrw_rmdir_cmd 刪除目錄失敗，netrw 會再嘗試一次用 g:netrw_rmf_cmd 變
量進行刪除。缺省值為:

	|g:netrw_rmf_cmd|: ssh HOSTNAME rm -f

相關主題: |netrw-d|
相關設置變量: |g:netrw_localrmdir|  |g:netrw_rm_cmd|
              |g:netrw_rmdir_cmd|   |g:netrw_ssh_cmd|


*netrw-explore*  *netrw-hexplore* *netrw-nexplore* *netrw-pexplore*
*netrw-rexplore* *netrw-sexplore* *netrw-texplore* *netrw-vexplore* *netrw-lexplore*
目 錄 探 索 命 令  {{{2

     :[N]Explore[!]  [dir]... 探索當前文件所在的目錄		     *:Explore*
     :[N]Hexplore[!] [dir]... 水平分割    並探索                     *:Hexplore*
     :[N]Lexplore[!] [dir]... 切換左瀏覽器                           *:Lexplore*
     :[N]Sexplore[!] [dir]... 分割並探索當前文件所在的目錄	     *:Sexplore*
     :[N]Vexplore[!] [dir]... 垂直分割    並探索                     *:Vexplore*
     :Texplore       [dir]... 建立新標籤頁並探索                     *:Texplore*
     :Rexplore            ... 返回到瀏覽器                           *:Rexplore*

     用於 :Explore **/模式 : (另見 |netrw-starstar|)
     :Nexplore............. 轉到下一個匹配的文件                    *:Nexplore*
     :Pexplore............. 轉到前一個匹配的文件                    *:Pexplore*

						*netrw-:Explore*
:Explore  會打開當前文件目錄上的本地目錄瀏覽器 (或者如果指定，[dir] 目錄)。
	  只有該文件被修改且 |'hidden'| 未置位時才會分割窗口，否則瀏覽窗口使用
	  該窗口。通常使用水平分割。
:Explore! 類似於 :Explore，但使用垂直分割。

						*netrw-:Hexplore*
:Hexplore  [dir] 執行 :Explore，用 |:belowright| 水平分割。
:Hexplore! [dir] 執行 :Explore，用 |:aboveleft|  水平分割。

						*netrw-:Lexplore*
:[N]Lexplore [dir] 在當前標籤頁上左側切換一個全高的瀏覽器窗口。如果 [dir] 省
	  略，在當前目錄上打開 netrw 窗口；不管從哪個窗口執行本命令，:Lexplore
	  [dir] 會在左側瀏覽器上顯示指定目錄。

	  缺省 :Lexplore 會將未初始化的 |g:netrw_chgwin| 值設為 2；從而，編輯
	  會首選在 window#2 進行。

	  [N] 指定 |g:netrw_winsize|，只適用於新建的 :Lexplore 窗口。

	  喜歡此方法的常常也喜歡樹風格的顯示；見 |g:netrw_liststyle|。

	  另見:	    |netrw-C|           |g:netrw_browse_split|   |g:netrw_wiw|
		    |netrw-p| |netrw-P|   |g:netrw_chgwin|
		    |netrw-c-tab|       |g:netrw_winsize|

:[N]Lexplore! 類似於 :Lexplore，但全高的探索器窗口開在右側，未初始化的
	 |g:netrw_chgwin| 設為 1。

						*netrw-:Sexplore*
:Sexplore 調用本地目錄瀏覽器前總分割窗口。和 Explore 相同，通常使用水平分割。
:Sexplore! [dir] 類似於 :Sexplore，但使用垂直分割。

						*netrw-:Texplore*
:Texplore  [dir] 在生成瀏覽窗口前先執行 |:tabnew|

						*netrw-:Vexplore*
:Vexplore  [dir] 執行 :Explore，用 |:leftabove|  垂直分割。
:Vexplore! [dir] 執行 :Explore，用 |:rightbelow| 垂直分割。

可選的參數是:

 [N]: 此參數會代替 |g:netrw_winsize| 來指定新瀏覽器窗口應有的行數和列數。
      否則，如果用戶指定 |g:netrw_winsize| 變量，用來設置新瀏覽器窗口應有的行
      數和列數。

 [dir]: 缺省這些瀏覽器命令使用當前文件的目錄。不過你可以顯式提供使用的目錄 (路
        徑)。 >

	:Explore /some/path
<
						*netrw-:Rexplore*
:Rexplore  此命令和其它的有所不同，它不一定會打開瀏覽器窗口。

	   返回瀏覽器 ~
	   當用在 netrw 瀏覽器窗口的文件上按 <cr> 等方式編輯文件時，在編輯文件
	   時調用的 :Rexplore 會重新顯示上次在此窗口上顯示的 netrw 瀏覽器窗
	   口。

	   從瀏覽器上返回 ~
	   相反地，編輯目錄時調用 :Rexplore 會返回到使用此窗口的上次的文件編輯
	   狀態。

	   <2-leftmouse> 映射 (只有在 gvim 和有相應支持的終端才存在) 的行為和
	   :Rexplore 相同。

另見: |g:netrw_alto| |g:netrw_altv| |g:netrw_winsize|

*netrw-star* *netrw-starpat* *netrw-starstar* *netrw-starstarpat* *netrw-grep*
使 用 星 號 和 模 式 進 行 探 索 {{{2

Explore、Sexplore、Hexplore 或 Vexplore 使用以下四種風格的路徑時，Explore 生成
本地文件系統生成滿足要求的的文件列表。這些探索模式不適用於遠程文件瀏覽。 >

    */filepat	當前目錄滿足文件模式 filepat 的文件
    **/filepat	當前目錄或之下滿足文件模式的文件
    *//pattern	當前目錄內容包含模式 pattern 的文件 (使用 vimgrep)
    **//pattern	當前目錄或之下內容包含模式 pattern 的文件 (使用 vimgrep)
<
光標會被放在列表的第一個文件上。用 |:Nexplore| 可以訪問該列表後面的文件，也可
用 |:Pexplore| 訪問列表前面的文件。Explore 會更新目錄並把光標放在合適的位置。

簡單的 >
	:Explore
會清除探索列表。

如果控制台或 GUI 產生的 shift-up 或 shift-down 序列能夠被識別，也許你會發現
shift-下箭頭 和 shift-上箭頭 更方便。netrw 提供它們的映射，如下:

	<s-down>  == Nexplore，而
	<s-up>    == Pexplore。

考慮下例 >

	:Explore */*.c
	:Nexplore
	:Nexplore
	:Pexplore
<
狀態行的右側會顯示 "Match 3 of 20" 這樣的消息。

相關設置變量:
	|g:netrw_keepdir|          |g:netrw_browse_split|
	|g:netrw_fastbrowse|       |g:netrw_ftp_browse_reject|
	|g:netrw_ftp_list_cmd|     |g:netrw_ftp_sizelist_cmd|
	|g:netrw_ftp_timelist_cmd| |g:netrw_list_cmd|
	|g:netrw_liststyle|


顯 示 文 件 信 息					*netrw-qf* {{{2

把光標放在文件名上，按 "qf" 會顯示文件的大小和最近的修改時間。目前，此功能只適
用於本地文件。


編 輯 文 件 或 目 錄 的 隱 藏 列 表	*netrw-ctrl-h* *netrw-edithide* {{{2

"<ctrl-h>" 映射顯示請求以允許用戶改變 |g:netrw_list_hide| 包含的文件/目錄隱藏
列表。隱藏列表包含一個或多個逗號分隔的模式列表。可以隱藏 (也就是不顯示) 或只顯
示滿足這些模式的文件和/或目錄 (見 |netrw-a|)。

"gh" 映射 (見 |netrw-gh|) 在普通的隱藏列表和隱藏 "." 開始的文件或目錄間快速切
換。

示例， >
	let g:netrw_list_hide= '\(^\|\s\s\)\zs\.\S\+'
效果上，它使得 |netrw-gh| 命令的結果成為初始的設置。具體來說:

	\(^\|\s\s\)   : 如果下面的模式開始本行，-或-出現在兩個連續的空白之後
	\zs           : 開始隱藏匹配
	\.            : 以句號開始
	\S\+          : 後跟一個或多個非空白字符

相關設置變量: |g:netrw_hide| |g:netrw_list_hide|
相關主題: |netrw-a| |netrw-gh| |netrw-mh|


					*netrw-sort-sequence*
編 輯 排 序 序 列			*netrw-S* *netrw-sortsequence* {{{2

如果 "排序風格" 為 name，用此排序序列可決定優先次序 (g:netrw_sort_sequence)。
排序序列裡，通常按後綴名安排名字列表的優先級，但其實任何模式都可以用。用逗號定
界模式。缺省的排序序列是 (在一行上):
>
Unix 上: >
	'[\/]$,\<core\%(\.\d\+\)\=,\.[a-np-z]$,\.h$,\.c$,\.cpp$,*,\.o$,\.obj$,
	\.info$,\.swp$,\.bak$,\~$'
<
其它: >
	'[\/]$,\.[a-np-z]$,\.h$,\.c$,\.cpp$,*,\.o$,\.obj$,\.info$,
	\.swp$,\.bak$,\~$'
<
單獨的 * 包含其它模式沒有覆蓋的所有文件名。用 g:netrw_sort_sequence 變量 (手動
或在 <.vimrc> 裡設置) 可以修改排序序列，"S" 映射也可以完成。

相關主題:     |netrw-s|               |netrw-S|
相關設置變量: |g:netrw_sort_sequence| |g:netrw_sort_options|


用 SYSTEM() 執 行 光 標 所 在 的 文 件				*netrw-X* {{{2

光標停留在可執行文件上時按 X 時，會用文件名給出提示，要求輸入參數。按 [return]
後 netrw 會調用 |system()| 執行該命令和給定參數。結果用 |:echomsg| 顯示，
|:messages| 可以重新顯示結果。Ansi 轉義序列會被去掉。


強 制 作 為 文 件 或 目 錄 對 待		*netrw-gd* *netrw-gf* {{{2

遠端符號鏈接 (即通過 ssh 或 ftp 列出的) 有一個問題，不容易知道它們實際鏈接到文
件還是目錄。

強製作為文件: 用 >
	gf
<
強製作為目錄: 用 >
	gd
<

向 上 一 層							*netrw--* {{{2

要到上一層的目錄，按 "-" 或在列表的 ../ 目錄項上按 <cr>。

netrw 用 |g:netrw_list_cmd| 命令執行目錄列表操作，其中 HOSTNAME 被用戶提供的
url 的宿主名替換。netrw 提供的缺省命令是: >

	ssh HOSTNAME ls -FLa
<
其中的 HOSTNAME 將根據讀取操作的請求設為 [user@]hostname。很自然地，用戶可以自
行設置以覆蓋此命令。NetList 函數實現遠程瀏覽，它期待拖尾斜槓能標記目錄名。


隱 藏 文 件 或 目 錄			        *netrw-a* *netrw-hiding* {{{2

netrw 的瀏覽機制提供三種使用隱藏列表的方法: 忽略此列表、隱藏匹配的文件、還有只
顯示匹配的文件。

如果沒有用 |netrw-mf| 標記過文件:

用戶可以用 "a" 映射在這三種方式間切換。

|g:netrw_list_hide| 變量保存逗號分隔的正規表達式列表 (例如 ^.*\.obj$,^\.)，以
指定隱藏列表。(另見 |netrw-ctrl-h|) 要設置隱藏列表，可以用 <c-h> 映射。例如，
要隱藏 "." 開頭的文件，可以用 <c-h> 映射來設置隱藏列表為 '^\..*' (你也可以在
<.vimrc> 裡設置 g:netrw_list_hide= '^\..*')。然後用 "a" 鍵就可以顯示所有文件、
隱藏匹配文件或只顯示匹配文件。

	示例: \.[ch]$
		這個隱藏列表命令會隱藏/顯示所有的 *.c 和 *.h 文件。

	示例: \.c$,\.h$
		這個隱藏列表命令也會隱藏/顯示所有的 *.c 和 *.h 文件。

不要忘記用 "a" 映射來選擇你想要的 (普通/隱藏/顯示) 模式！

如果用 |netrw-mf| 標記過文件，那麼此命令會:

  如果顯示所有文件或非隱藏文件:
   修改 g:netrw_list_hide 列表，加入帶標記文件，並只顯示非隱藏文件。

  否則，如果只顯示隱藏文件:
   修改 g:netrw_list_hide 列表，刪除帶標記文件，並只顯示非隱藏文件。

					*netrw-gh* *netrw-hide*
有一個快捷鍵，按 >
	gh
可以切換是否隱藏句號 (點) 開始的文件。

相關設置變量: |g:netrw_list_hide|  |g:netrw_hide|
相關主題: |netrw-a| |netrw-ctrl-h| |netrw-mh|

					*netrw-gitignore*
Netrw 提供幫助函數 'netrw_gitignore#Hide()'，和 |g:netrw_list_hide| 一起使用時
自動隱藏 git-ignore 的文件。

'netrw_gitignore#Hide' 搜索下面文件中的模式: >

	'./.gitignore'
	'./.git/info/exclude'
	全局 gitignore 文件: `git config --global core.excludesfile`
	系統 gitignore 文件: `git config --system core.excludesfile`
<
忽略不存在的文件。
從存在的文件中提取 git-ignore 模式，轉換為隱藏文件的模式。例如， '.gitignore'
文件中 '*.log' 轉換為 '.*\.log'。

要使用此函數，簡單地把其輸出賦值給 |g:netrw_list_hide| 選項。 >

	例如: let g:netrw_list_hide= netrw_gitignore#Hide()
		在 netrw 裡隱藏 git-ignore 文件。

	例如: let g:netrw_list_hide= netrw_gitignore#Hide('my_gitignore_file')
		函數可以接受使用 git-ignore 模式的額外文件。

	例如: g:netrw_list_hide= netrw_gitignore#Hide() . '.*\.swp$'
		混合 'netrw_gitignore#Hide' 和定制的模式。
<

改 進 目 錄 瀏 覽			*netrw-listhack* *netrw-ssh-hack* {{{2

不斷要求輸入密碼很討厭，遠程目錄的瀏覽尤其受這個問題影響。

對 Linux/Unix 系統而言，Rob Flickenger 所著的 "Linux Server Hacks - 100
industrial strength tips & tools" (O'Reilly, ISBN 0-596-00461-3) 一書給出如
何設置無需密碼的 ssh 和 scp 的使用方式的提示，也包括相關安全問題的討論。該書
曾經可從 http://hacks.oreilly.com/pub/h/66 得到，但現在該地址已經被重定向到某
個 "hackzine" 網站。基於該文章和我與 Ben Schmidt 的通信，我試圖給一個小結:

	1. 在本地機器 (ssh 客戶端) 上生成 公鑰/私鑰 對: >
		ssh-keygen -t rsa
		(按照提示，把該文件存到 ~/.ssh/id_rsa)
<
	2. 如果不要 passphrase，提示 passphrase 時只要按 <CR> 即可 (兩次)。如
	   果需要 passphrase，你要使用 ssh-agent，從而每個會話期間只需輸入一次
	   passphrase。如果不用 passphrase，只要簡單地登錄到你的本地機器上或者
	   用任何方式得到密鑰文件就足夠可以訪問任何使用該密鑰提供授權登錄的
	   ssh 服務器。

	3. 這會建立兩個文件: >
		~/.ssh/id_rsa
		~/.ssh/id_rsa.pub
<
	4. 在目標機器 (ssh 服務器) 上: >
		cd
		mkdir -p .ssh
		chmod 0700 .ssh
<
	5. 在你的本地機器 (ssh 客戶端) 上: (在一行上輸入) >
		ssh {serverhostname}
		  cat '>>' '~/.ssh/authorized_keys2' < ~/.ssh/id_rsa.pub
<
	   或者，對於 OpenSSH 而言，(在一行上輸入) >
		ssh {serverhostname}
		  cat '>>' '~/.ssh/authorized_keys' < ~/.ssh/id_rsa.pub
<
你可以這樣測試 >
	ssh {serverhostname}
你應該可以登錄到服務器機器而無須任何進一步的輸入。

如果你決定使用 passphrase: >
	ssh-agent $SHELL
	ssh-add
	ssh {serverhostname}
ssh-add 時，你會被提示輸入密鑰 passphrase，但之後 ssh 就無須再輸入了。要用於
vim，你可以用 >
	ssh-agent vim
然後在 vim 中，用 >
	:!ssh-add
另一個方案是在要執行 vim 的終端上應用 ssh-agent: >
	ssh-agent xterm &
然後需要的時候執行 ssh-add。

vim 郵件列表上也有人提到 Windows 上的 Pageant 有助於避免不斷要求輸入密碼的麻
煩。

Kingston Fung 寫下另一個避免不斷要求輸入密碼的方法:

    要避免每次使用 scp 都輸入密碼的需要，你在文檔裡給出了一個設置無密碼 ssh 帳
    號的技巧。我有個更好的方法: 我可以使用普通有密碼的 ssh 帳號來訪問內容，而
    無須每次都輸入密碼。既安全又方便。我試了 ssh 公鑰驗證和 ssh-agent，這麼做
    就可以用了！這裡是具體操作的鏈接:

    http://www.ibm.com/developerworks/library/l-keyc2/
    http://sial.org/howto/openssh/publickey-auth/


    Ssh 小提示:

	Thomer Gil 提供的加速 netrw+ssh 的提示:
	    http://thomer.com/howtos/netrw_ssh.html

	Alex Young 關於加速ssh 的若干提示:
	    http://usevim.com/2012/03/16/editing-remote-files/


列 出 書 簽 和 歷 史			*netrw-qb* *netrw-listbookmark* {{{2

按 "qb" (query bookmarks，查詢書籤) 會列出書籤裡記錄的目錄和目錄遍歷的歷史。

相關主題:
	|netrw-gb| 如何回到 (go) 書籤
	|netrw-mb| 如何建立書籤
	|netrw-mB| 如何刪除書籤
	|netrw-u|  如何切換到歷史堆棧裡先前的目錄
	|netrw-U|  如何切換到歷史堆棧裡後來的目錄


建 立 新 目 錄						*netrw-d* {{{2

用 "d" 映射可以在遠端 (取決於全局變量 g:netrw_mkdir_cmd) 或本地 (取決於全局變
量 g:netrw_localmkdir) 建立目錄。netrw 會要求新目錄的名字。這時單輸入 <CR> 可
以中止目錄建立過程。試圖建立已經存在的本地目錄 (可以是文件或目錄) 會被檢測到並
進行報告，然後忽略。

相關主題: |netrw-D|
相關設置變量:			|g:netrw_localmkdir|   |g:netrw_mkdir_cmd|
				|g:netrw_remote_mkdir| |netrw-%|


使 瀏 覽 目 錄 成 為 當 前 目 錄		*netrw-c* *netrw-curdir* {{{2

|g:netrw_keepdir| 缺省為 1。該設置意味著當前目錄不會跟蹤瀏覽目錄。(這麼做是為
於和 v6 版本的文件探索器後向兼容)

設置 g:netrw_keepdir 為 0 告訴 netrw 使 vim 的當前目錄跟蹤 netrw 的瀏覽目錄。

不過，保持缺省為 1 的 g:netrw_keepdir 設置意味著 netrw 維護它自己的當前目錄的
概念。要想使兩個目錄相同，可用 "c" 映射 (只要按 c 就可以)。該映射會把 Vim 概念
的當前目錄設為當前的瀏覽目錄。

相關設置變量: |g:netrw_keepdir|


標 記 文 件					*netrw-:MF*	*netrw-mf* {{{2
	(另見 |netrw-mr|)

netrw 提供了幾種標記文件的方式:

	* 把光標移到文件名上按 "mf" 就可以標記文件。

	* gvim 中，更可以用 <s-leftmouse> 來標記文件。(見 |netrw-mouse|)

	* :MF 命令接受文件列表 (針對本地目錄，列表可能包含通配符 -- 見
	  |glob()|) >

		:MF *.c
<
	  (備註 :MF 用 |<f-args>| 以便在空白內斷開行)

	* 用 |argument-list| 標記文件 (|netrw-mA|)

	* 基於 |location-list| 標記文件 (|netrw-qL|)

	* 基於 quickfix (|netrw-qF|)
	  (|quickfix-error-lists|)

下面的 netrw 映射使用帶標記文件:

    |netrw-a|	隱藏標記文件/目錄
    |netrw-D|	刪除標記文件/目錄
    |netrw-ma|	移動標記文件名到 |arglist|
    |netrw-mA|	移動 |arglist| 文件名到標記文件列表
    |netrw-mb|	附加標記文件到書籤
    |netrw-mB|	從書籤中刪除標記文件
    |netrw-mc|	複製標記文件到目標
    |netrw-md|	給標記文件應用 vimdiff
    |netrw-me|	編輯標記文件
    |netrw-mF|	撤銷文件標記
    |netrw-mg|	在標記文件上應用 vimgrep
    |netrw-mm|	移動標記文件到目標
    |netrw-mp|	打印標記文件
    |netrw-mt|	為 |netrw-mm| 和 |netrw-mc| 設定目標
    |netrw-mT|	用標記文件生成標籤
    |netrw-mv|	在標記文件上應用 vim 命令
    |netrw-mx|	在標記文件上應用外殼命令
    |netrw-mX|	在標記文件上整塊應用外殼命令
    |netrw-mz|	壓縮/解壓標記文件
    |netrw-O|	獲取標記文件
    |netrw-R|	為標記文件換名

用標記文件相同的方式可以撤銷文件的標記，也就是，把光標移到帶標記的文件上按
"mf"。這也適用於 gvim 的 <s-leftmouse>。按 "mu" 可以一次撤銷所有標記 (見
|netrw-mu|)。

標記的文件使用 "netrwMarkFile" 高亮組高亮，該組缺省鏈接到 "Identifier" (見
|group-name| 下的 Identifier)。可以把以下代碼 >

	highlight clear netrwMarkFile
	hi link netrwMarkFile ..隨便什麼..
<
加入 $HOME/.vim/after/syntax/netrw.vim 來改變高亮組設置。

如果鼠標功能打開且在 Vim 裡可用，可用 <s-leftmouse> 來標記一個或多個文件。多個
文件的標記可通過按住 shift 拖動鼠標左鍵實現。(見 |netrw-mouse|)

			*markfilelist* *global_markfilelist* *local_markfilelist*
所有的標記文件都進入全局標記文件列表；只有唯一的這樣的列表。此外，每個 netrw
緩衝區都有自己緩衝區局部的標記文件列表；因為 netrw 緩衝區和特定的目錄相關聯，
這意味著每個目錄都有自己的局部標記文件列表。操作標記文件的命令分別使用兩個標記
文件列表中的一個。

已知問題: 如果使用樹模式 (|g:netrw_liststyle|) 而多個目錄上有相同的文件名，標
記其中一個文件會高亮所有這樣的文件，就像它們都被標記了一樣。不過，
|markfilelist| 只包含你實際選擇的文件。這個問題不太可能得到修正。

撤 銷 文 件 標 記						*netrw-mF* {{{2
	(另見 |netrw-mf|、|netrw-mu|)

"mF" 命令撤銷當前緩衝區所有文件的標記。也可用 mf (|netrw-mf|) 來撤銷特定的己標
記文件的標記。

用 位 置 列 表 標 記 文 件 					*netrw-qL* {{{2
	(另見 |netrw-mf|)

"qL" 可以把 |location-list| 轉換為標記文件的列表。然後用 me (|netrw-me|) 這樣
的命令就可以編輯它們。


用 QUICKFIX 列 表 標 記 文 件					*netrw-qF* {{{2
	(另見 |netrw-mf|)

"qF" 可以把 |quickfix-error-lists| 轉換為標記文件的列表。然後用 me
(|netrw-me|) 這樣的命令就可以編輯它們。例如，可以調用 |:vimgrep| 來生成
Quickfix 錯誤列表。


用 正 規 表 達 式 標 記 文 件				*netrw-mr* {{{2
	(另見 |netrw-mf|)

也可以用 "mr" 來標記文件；netrw 會給出提示，"Enter regexp: "。此時，你可以輸入
一個外殼風格的正規表達式，比如 *.c$ (見 |glob()|)。glob() 不能用於遠程文件，所
以 netrw 把 "*" 轉換成 ".*" (見 |regexp|) 並依此匹配文件。將來，我可能會考慮提
供選項來使用 |regexp| 而不是 glob()-風格的表達式 (另一個選項)。


帶 標 記 文 件，任 意 VIM 命 令					*netrw-mv* {{{2
	    (關於如何標記文件，見 |netrw-mf| 和 |netrw-mr|)
		      (使用局部標記文件列表)

"mv" 映射會使 netrw 在本地標記文件列表的每個文件上分別執行任意的 vim 命令:

	* 1split
	* sil! keepalt e file
	* 執行 vim 命令
	* sil! keepalt wq!

給出提示 "Enter vim command: " 讓用戶給出要使用的 vim 命令。


帶 標 記 文 件，任 意 外 殼 命 令				*netrw-mx* {{{2
	    (關於如何標記文件，見 |netrw-mf| 和 |netrw-mr|)
		      (使用局部標記文件列表)

激活 "mx" 映射後，netrw 會詢問用戶應用於所有帶標記文件的 (外部) 命令。命令中所
有的 "%" 被帶標記文件的每個名字依次替代。如果命令中沒有 "%"，那麼命令後附加一
個空格和一個帶標記文件名。

示例:
	(標記文件)
	mx
	Enter command: cat

	結果是一系列外殼命令:
	cat 'file1'
	cat 'file2'
	...


帶 標 記 文 件，任 意 外 殼 命 令，整 塊			*netrw-mX* {{{2
	    (關於如何標記文件，見 |netrw-mf| 和 |netrw-mr|)
		      (使用全局標記文件列表)

激活 'mX' 映射後，netrw 會請用戶給出某個 (外部) 命令，應用在全局標記文件列表上
的所有帶標記文件。"整塊" 的意思是一個命令一次執行在所有文件上: >

	command files

此方法可用於，例如，選擇所有文件打個 tarball 包: >

	(標記文件)
	mX
	Enter command: tar cf mynewtarball.tar
<
此例中會執行的命令是:

	tar cf mynewtarball.tar 'file1' 'file2' ...


帶 標 記 文 件 : 參 數 列 表				*netrw-ma* *netrw-mA*
	    (關於如何標記文件，見 |netrw-mf| 和 |netrw-mr|)
		      (使用全局標記文件列表)

ma 可以從標記文件列表移動文件名到參數列表。
mA 可以從參數列表移動文件名到標記文件列表。

另見: |netrw-qF| |argument-list| |:args|


帶 標 記 文 件 : 壓 縮 與 解 壓 縮			*netrw-mz* {{{2
	    (關於如何標記文件，見 |netrw-mf| 和 |netrw-mr|)
		      (使用局部標記文件列表)

對任何壓縮過的帶標記文件，"mz" 會對它們解壓。
對任何被解壓的帶標記文件，"mz" 會用 |g:netrw_compress| 指定的命令對它們進行壓
縮。缺省，使用 "gzip"。

對於解壓，netrw 使用一個後綴到相應解壓工具的 |Dictionary|；見
|g:netrw_decompress|。

記住可以用正規表達式來標記多個文件 (見 |netrw-mr|)；這對壓縮與解壓縮大量文件特
別有用。

相關設置變量: |g:netrw_compress| |g:netrw_decompress|

帶 標 記 文 件 : 復 制					*netrw-mc* {{{2
	    (關於如何標記文件，見 |netrw-mf| 和 |netrw-mr|)
		      (使用全局標記文件列表)

用 mt 選擇目標目錄 (|netrw-mt|)。然後改變目錄，選擇文件 (見 |netrw-mf|)，然後
按 "mc"。從當前窗口 (執行 mf 的地方) 複製到目標。

如果沒有用 |netrw-mt| 設置目標目錄，netrw 會讓你輸入要複製到的目錄。

也可以複製目錄及其內容 (只限本地) 來目標目錄。

相關設置變量:
	|g:netrw_localcopycmd|
	|g:netrw_localcopydircmd|
	|g:netrw_ssh_cmd|

帶 標 記 文 件 : 比 較					*netrw-md* {{{2
	    (關於如何標記文件，見 |netrw-mf| 和 |netrw-mr|)
		      (使用全局標記文件列表)

用 |vimdiff| 來顯示選擇文件的差異 (為此，可以選擇兩到三個文件)。

帶 標 記 文 件 : 編 輯					*netrw-me* {{{2
	    (關於如何標記文件，見 |netrw-mf| 和 |netrw-mr|)
		      (使用全局標記文件列表)

"me" 命令把帶標記文件放在 |arglist| 上，然後開始編輯它們。用 |:Rexplore| 可以
回到瀏覽器窗口。
(|:n| 和 |:p| 可以編輯 arglist 的下一個和上一個文件)

帶 標 記 文 件: GREP						*netrw-mg* {{{2
	    (關於如何標記文件，見 |netrw-mf| 和 |netrw-mr|)
		      (使用全局標記文件列表)

"mg" 命令在帶標記文件上應用 |:vimgrep|。
該命令會詢問需要的模式；你可以輸入: >
	/pattern/[g][j]
	! /pattern/[g][j]
	pattern
<
用 /pattern/，從 vimgrep 產生的 |quickfix| 列表 (見  |:copen|、|:cnext|、
|:cprevious|、|:cclose|) 的首個項目開始編輯。使用的是 |:vimgrep| ，因而不帶
'g' 時每行只加到 quickfix 列表上一次，帶 'g' 時加入每個匹配。

用 /pattern/j，"mg" 可以縮減當前的標記文件列表，只包含給定模式的那些標記文件。
因此可以用 >
	mr ...文件模式...
	mg /內容模式/j
<
來得到同時滿足文件名匹配文件模式且內容限定在指定內容模式的標記文件列表。


帶 標 記 文 件 : 按 後 綴 隱 藏 或 顯 示		*netrw-mh* {{{2
	    (關於如何標記文件，見 |netrw-mf| 和 |netrw-mr|)
		      (使用局部標記文件列表)

"mh" 命令提取帶標記文件的後綴，然後在隱藏列表中切換它們的存在與否。請 注意 據
此，帶有相同後綴的文件多次出現會使得每個文件都切換一次此後綴的存在與否 (所以偶
數個相同後綴的帶標記文件和不選任何文件的作用是一樣的)。

相關主題: |netrw-a| |g:netrw_list_hide|

帶 標 記 文 件 : 移 動					*netrw-mm* {{{2
	    (關於如何標記文件，見 |netrw-mf| 和 |netrw-mr|)
		      (使用全局標記文件列表)

	警 告: 移動文件比複製文件要危險。被移動的文件先被複製然後被刪除；如果
	複製操作失敗但刪除操作成功，該文件就丟失了。你要麼用不太重要的文件先試
	試，要麼用 mc 和 D 先進行複製然後再刪除。請自行負責！

用 mt 選擇目標目錄 (|netrw-mt|)。然後改變目錄，選擇文件 (見 |netrw-mf|)，然後
按 "mm"。從當前窗口 (執行 mf 的地方) 移動到目標。

相關設置變量: |g:netrw_localmovecmd| |g:netrw_ssh_cmd|

帶 標 記 文 件 : 打 印					*netrw-mp* {{{2
	    (關於如何標記文件，見 |netrw-mf| 和 |netrw-mr|)
		      (使用局部標記文件列表)

"mp" 命令使 netrw 對帶標記文件應用 |:hardcopy| 命令。具體地，它在一個單行的窗
口上打開每個文件，執行 hardcopy，然後關閉這個單行窗口。


帶 標 記 文 件 : 執 行					*netrw-ms* {{{2
	    (關於如何標記文件，見 |netrw-mf| 和 |netrw-mr|)
		      (使用局部標記文件列表)

"ms" 命令使 netrw 執行帶標記文件 (使用 vim 的 |:source| 命令)


帶 標 記 文 件 : 設 置 目 標 目 錄			*netrw-mt* {{{2
     (關於如何標記文件，見 |netrw-mf| 和 |netrw-mr|)

設置帶標記文件複製/移動的目標 (見 |netrw-mc| 和 |netrw-mm|):

  * 如果光標在文件名上，使用 netrw 窗口當前顯示的目錄作為複製/移動目標。

  * 同樣，如果光標在橫幅處，使用 netrw 窗口當前顯示的目錄作為複製/移動目標。
    除非目標已經是當前目錄，此時，鍵入 "mf" 撤銷該目標。

  * 但如果光標在一個目錄名上，使用該目錄作為複製/移動目標。

  * 可用 :MT [directory] 命令來設置目標			*netrw-:MT*
    此命令使用 |<q-args>|，所以接受裡帶空格的目錄名，不需轉義。

  * 在打開鼠標的 vim 或 gvim 裡，可用 <c-leftmouse> 選擇目標

每個 vim 會話只有一個複製/移動目標；也就是說，該目標是一個腳本變量 (見
|s:var|)，並且由所有 (同一 vim 實例中的) netrw 窗口共享。

使用菜單和 gvim 時，netrw 提供 "Targets" 菜單項，可用來從書籤和歷史的選項中選
取目標。

相關主題:
      標記文件...........................................|netrw-mf|
      用正規表達式標記文件...............................|netrw-mr|
      帶標記文件: 用書籤作為目標目錄.....................|netrw-Tb|
      帶標記文件: 用歷史作為目標目錄.....................|netrw-Th|


帶 標 記 文 件 : 建 立 標 簽				*netrw-mT* {{{2
	    (關於如何標記文件，見 |netrw-mf| 和 |netrw-mr|)
		      (使用全局標記文件列表)

"mT" 映射為帶標記文件應用 |g:netrw_ctags| 定義的命令 (缺省是 "ctags")。對於遠
程瀏覽，為了建立一個標籤文件，netrw 會使用 ssh (見 |g:netrw_ssh_cmd|)，所以要
能在遠程系統使用此命令，ssh 必須存在。對於本地系統，見 |ctags| 說明如何得到可
用的版本。我自己用 hdrtags，目前可從
http://www.drchip.org/astronaut/src/index.html 獲得，並在我的 <.vimrc> 中
有 >

	let g:netrw_ctags= "hdrtag"
<
如果為一組遠程的文件建立了標籤，產生的 tags 文件被 "獲取"；也即，一個備份被傳
輸到本地系統的目錄。然後這個本地的 tags 文件被修改，使得它可以在網上使用。具體
地，tags 裡的文件名被修改，每個路徑前面加上了用於獲取的 netrw 兼容的 url。如果
用戶隨後用某個轉到標籤的動作 (|tags|)，netrw 就可以用該 url 來編輯想要的文件，
並轉到對應的標籤上。

相關設置變量: |g:netrw_ctags| |g:netrw_ssh_cmd|


帶 標 記 文 件: 用 書 簽 作 為 目 標 目 錄		*netrw-Tb* {{{2

設置帶標記文件複製/移動的目標。

|netrw-qb| 映射給出書籤 (和歷史) 的列表。可以用 [count]Tb (缺省計數: 1) 從中選
取一個書籤作為標記文件的目標。

相關主題:
      複製文件到目標.....................................|netrw-mc|
      列出書籤和歷史.....................................|netrw-qb|
      帶標記文件: 設置目標目錄...........................|netrw-mt|
      帶標記文件: 用歷史作為目標目錄.....................|netrw-Th|
      標記文件...........................................|netrw-mf|
      用正規表達式標記文件...............................|netrw-mr|
      移動文件到目標.....................................|netrw-mm|


帶 標 記 文 件: 用 歷 史 作 為 目 標 目 錄			*netrw-Th* {{{2

設置帶標記文件複製/移動的目標。

|netrw-qb| 映射給出歷史 (和書籤) 的列表。可以用 [count]Th (缺省計數: 0，即當前
目錄) 從中選取一個歷史項作為標記文件的目標。

相關主題:
      複製文件到目標.....................................|netrw-mc|
      列出書籤和歷史.....................................|netrw-qb|
      帶標記文件: 設置目標目錄...........................|netrw-mt|
      帶標記文件: 用書籤作為目標目錄.....................|netrw-Tb|
      標記文件...........................................|netrw-mf|
      用正規表達式標記文件...............................|netrw-mr|
      移動文件到目標.....................................|netrw-mm|


帶 標 記 文 件 : 撤 銷 標 記				*netrw-mu* {{{2
     (見 |netrw-mf| 、|netrw-mF|)

"mu" 映射撤銷當前所有帶標記文件的標記。此命令和 "mF" 不同之處在於後者只撤銷當
前目錄下的文件，而 "mu" 撤銷全局和所有緩衝區局部的標記文件的標記。
(見 |netrw-mF|)


				*netrw-browser-settings*
NETRW 瀏 覽 器 變 量		*netrw-browser-options* *netrw-browser-var* {{{2

(如果你對 netrw 文件傳輸設置感興趣，見 |netrw-options| 和 |netrw-protocol|)

<netrw.vim> 瀏覽器提供你可以修改的以變量形式出現的設置。把這些設置放在
<.vimrc> 裡，你就可以定制瀏覽的偏好。(另見: |netrw-settings|)
>
   ----				----
   變量				解釋
   ----				----
<  *g:netrw_altfile*		有些人喜歡 |CTRL-^| 返回最返的編輯文件。要選擇
				此行為，設置此參數為 1。
				其他的人喜歡 |CTRL-^| 返回 netrw 瀏覽緩衝區。
				要選擇此行為，設置此參數為 0。
				 缺省: =0

  *g:netrw_alto*		置位此變量後，分割後的新窗口出現在下方而不是
				上方 (見 |netrw-o|)
				 缺省: =&sb           (見 |'sb'|)

  *g:netrw_altv*		置位此變量後，分割後的新窗口出現在右方而不是
  				左方  (見 |netrw-v|)
				 缺省: =&spr          (見 |'spr'|)

  *g:netrw_banner*		顯示/關閉橫幅
				=0: 關閉橫幅
				=1: 顯示橫幅1 (缺省)
				注意: 關閉橫幅是新功能，可能會引起問題。

  *g:netrw_bannerbackslash*	如果此變量存在且非零，橫幅顯示時使用反斜槓而不
  				是斜槓。

  *g:netrw_browse_split*	瀏覽時，<cr> 這樣打開文件:
				=0: 重用同一個窗口 (缺省)
				=1: 先水平分割窗口
				=2: 先垂直分割窗口
				=3: 在新標籤頁中打開文件
				=4: 等同於 "P" (即打開前次窗口)
				    注意 可用 |g:netrw_preview| 來進行垂直分割
				    而不是水平分割。
				=[servername,標籤頁號,窗口號]
				    給出 |List| 就像這樣，用名為 "servername"
				    的遠程服務器進行編輯。使用給定的標籤頁號和
				    窗口號來執行編輯
				    (見 |clientserver|、|netrw-ctrl-r|)
				此選項不影響 |:Lexplore| 窗口。

				相關主題:
				    |g:netrw_alto|	|g:netrw_altv|
				    |netrw-C|		|netrw-cr|
				    |netrw-ctrl-r|

  *g:netrw_browsex_viewer*	指定查閱器的用戶偏好: >
					"kfmclient exec"
					"gnome-open"
<				如果使用了 >
					"-"
<				那麼 netrwFileHandler() 將尋找處理該擴展名的腳
				本/函數 (見 |netrw_filehandler|)。

  *g:netrw_chgperm*		Unix/Linux: "chmod PERM FILENAME"
				Windows:    "cacls FILENAME /e /p PERM"
				用以改變文件的訪問權限。

  *g:netrw_compress*		="gzip"
				    用此命令壓縮帶標記文件

  *g:Netrw_corehandler*		可用來指定 netrw 瀏覽器的 "x" 命令處理
				<core> 文件的額外處理。如果定義，
				g:Netrw_corehandler 指定一個或多個函數引用 (見
				|Funcref|)。
				(g:Netrw... 中的大寫是必需的，因為它保存函函數
				引用)


  *g:netrw_ctags*		="ctags"
				建立標籤使用的缺省外部程序

  *g:netrw_cursor*		= 2 (缺省)
				本選項控制 netrw 使用的 |'cursorline'| (cul)
				和 |'cursorcolumn'| (cuc) 設置:

				 值        瘦-長-樹            寬
				 =0      u-cul u-cuc      u-cul u-cuc
				 =1      u-cul u-cuc        cul u-cuc
				 =2        cul u-cuc        cul u-cuc
				 =3        cul u-cuc        cul   cuc
				 =4        cul   cuc        cul   cuc

				其中
				  u-cul : 用戶使用的 |'cursorline'|
				  u-cuc : 用戶使用的 |'cursorcolumn'|
				  cul   : 局部設置的 |'cursorline'|
				  cuc   : 局部設置的 |'cursorcolumn'|

  *g:netrw_decompress*		= { ".gz"  : "gunzip" ,
				    ".bz2" : "bunzip2" ,
				    ".zip" : "unzip" ,
				    ".tar" : "tar -xf"}
				  映射後綴到解壓程序的字典。

  *g:netrw_dirhistmax*            =10: 控制過去歷史最大數量。零關閉之。
				     (相關: |netrw-qb| |netrw-u| |netrw-U|)

  *g:netrw_dynamic_maxfilenamelen* =32: 支持動態決定
				    |g:netrw_maxfilenamelen| 的值，它影響本地
				    文件的長列表。

  *g:netrw_errorlvl*		=0: 最低顯示的錯誤級別
				    0: 備註
				    1: 警告
				    2: 錯誤

  *g:netrw_fastbrowse*		=0: 慢速瀏覽；
				    不會重用目錄列表；
				    總是重新獲取目錄列表。
				=1: 中速瀏覽；
				    只有遠程瀏覽才重用目錄列表。
				    (缺省值)
				=2: 快速目錄瀏覽；
				    只獲取沒有瀏覽過的目錄列表
				    (或在用 |netrw-ctrl-l| 時)。
				快速瀏覽意味著保留舊目錄列表的緩衝區，這樣就不
				需要重新獲取了。該特性對遠程瀏覽特別有意義。不
				過，如果加入或者刪除文件，舊的目錄列表就不再是
				最新的。此時可用 |netrw-ctrl-l| 刷新目錄列表。
				本選項提供用戶機會來選擇準確性 (即最新的列表)
				和速度的權衡。

  *g:netrw_ffkeep*		(缺省: 不存在)
				如果此變量存在且為零，netrw 不會保存和恢復
				|'fileformat'|。

  *g:netrw_fname_escape*	=' ?&;%'
  				遠程讀取/寫入前用於文件名。

  *g:netrw_ftp_browse_reject*	ftp 可能會生成一些錯誤和警告信息，它們會作為
  				"目錄" 和 "文件" 出現在列表裡。使用本模式來刪
				除這些內嵌的消息。缺省值為:
				 '^total\s\+\d\+$\|
				 ^Trying\s\+\d\+.*$\|
				 ^KERBEROS_V\d rejected\|
				 ^Security extensions not\|
				 No such file\|
				 : connect to address [0-9a-fA-F:]*
				 : No route to host$'

  *g:netrw_ftp_list_cmd*	傳遞給 ftp 用於列出目錄的選項。缺省為:
				 unix 或置位 g:netrw_cygwin 時:	"ls -lF"
                                 否則                           "dir"


  *g:netrw_ftp_sizelist_cmd*	傳遞給 ftp 用於列出目錄並按文件大小排序的選
				項。
				缺省:
				 unix 或置位 g:netrw_cygwin 時: "ls -slF"
				 否則                           "dir"

  *g:netrw_ftp_timelist_cmd*	傳遞給 ftp 用於列出目錄並按文件最後修改時間
  				排序的選項。
				缺省:
				 unix 或置位 g:netrw_cygwin 時: "ls -tlF"
				 否則                           "dir"

  *g:netrw_glob_escape*		='[]*?`{~$'  (unix)
				='[]*?`{$'  (windows
  				應用 glob() 前，目錄名中的這些字符被轉義

  *g:netrw_gx*			="<cfile>"
				此選項控制 gx (|netrw-gx|) 如果選擇光標下的文
				本。可用值見 |expand()|。

  *g:netrw_hide*		受 "a" 映射控制 (見 |netrw-a|)
				=0 : 顯示全部
				=1 : 顯示非隱藏文件
				=2 : 只顯示隱藏文件
				 缺省: =0

  *g:netrw_home*		書籤和歷史保存的主目錄 (分別存為 .netrwbook
  				和 .netrwhist)。
				 缺省: |'runtimepath'| 的第一個目錄

  *g:netrw_keepdir*		=1 (缺省) 瀏覽目錄時不影響當前目錄。
				=0 瀏覽目錄時設置當前目錄為該目錄。
				當前的瀏覽目錄保存在 b:netrw_curdir 裡 (另見
				|netrw-c|)

  *g:netrw_keepj*		="keepj" (缺省) netrw 試圖使 |:jumps| 表不受影
					 響。
				=""      netrw 不用 |:keepjumps|，但位置的保
					 存/恢復是例外。

  *g:netrw_list_cmd*		列出遠程目錄的命令
				 缺省: (如果 ssh 可執行)
                                       "ssh USEPORT HOSTNAME ls -FLa"

 *g:netrw_list_cmd_options*	如果此變量存在，其內容被附加到
				g:netrw_list_cmd 裡。例如，
				"2>/dev/null" 在 unix 系統上可用來去掉橫幅。


  *g:netrw_liststyle*		設置缺省的列表風格:
                                = 0: 瘦列表 (每個文件一行)
                                = 1: 長列表 (每個文件一行，帶有時間信息和文件
                                     長度)
				= 2: 寬列表 (多個文件，分列顯示)
				= 3: 樹型風格列表
  *g:netrw_list_hide*		逗號分隔的隱藏文件的模式列表
				模式是正規表達式 (見 |regexp|)
				對 git-ignore 文件有特殊支持: 可加入幫助函數
				'netrw_gitignore#Hide()'  的輸出來自動隱藏所有
				的 git-ignore 文件。
				更多詳情可見 |netrw-gitignore|。

				示例:
				 let g:netrw_list_hide= '.*\.swp$'
				 let g:netrw_list_hide= netrw_gitignore#Hide().'.*\.swp$'
				缺省: ""

  *g:netrw_localcopycmd*	="cp" Linux/Unix/MacOS/Cygwin
  				="copy" Windows
				把帶標記文件 (|netrw-mf|) 複製到目標目錄
				(|netrw-mt|、|netrw-mc|)

 *g:netrw_localcopydircmd*	="cp -R"	Linux/Unix/MacOS/Cygwin
				="xcopy /e /c /h/ /i /k"	Windows
				複製目錄到目標目錄。
				(|netrw-mc|、|netrw-mt|)

  *g:netrw_localmkdir*		建立本地目錄的命令
				 缺省: "mkdir"

  *g:netrw_localmovecmd*	="mv" Linux/Unix/MacOS/Cygwin
  				="move" Windows
				把帶標記文件 (|netrw-mf|) 移動到目標目錄
				(|netrw-mt|、|netrw-mm|)

  *g:netrw_localrmdir*		刪除目錄的命令 (rmdir)
				 缺省: "rmdir"

  *g:netrw_maxfilenamelen*	=32 缺省之所以選為該值，使為了使長列表能在
				80 列內顯示。如果你的屏幕更寬或者文件或目錄名
				可能長於 32 個字節，可以設置此選項使列表按列排
				列

  *g:netrw_mkdir_cmd*		用 ssh 建立遠程目錄的命令 (另見
				|g:netrw_remote_mkdir|)
				 缺省: "ssh USEPORT HOSTNAME mkdir"

  *g:netrw_mousemaps*		  =1 (缺省) 打開鼠標按鈕的功能
				   瀏覽時:
				     leftmouse       : 打開文件/目錄
				     shift-leftmouse : 標記文件
				     middlemouse     : 同 P
				     rightmouse      : 刪除文件/目錄
				=0: 關閉鼠標映射

  *g:netrw_nobeval*		不存在 (缺省)
				如果此變量存在，不進行氣泡計算
				(見 |'ballooneval'|)

 *g:netrw_sizestyle*		未定義: 實際字節 (缺省)
				="b" : 實際字節       (缺省)
				="h" : 人類可讀 (例如 5k, 4m, 3g)
				       以 1000 為底
				="H" : 人類可讀 (例如 5K, 4M, 3G)
				       以 1024 為底
				長列表 (|netrw-i|) 和查詢文件的映射
				(|netrw-qf|) 會使用指定風格顯示文件大小。

  *g:netrw_usetab*		如果此變量存在且非零，<tab> 映射支持 Lexplore
				的縮/放或打開 netrw 窗口。
				(見 |netrw-c-tab|)

  *g:netrw_remote_mkdir*	用 ftp 建立本地目錄的命令 (另見
				|g:netrw_mkdir_cmd|)
				 缺省: "mkdir"

  *g:netrw_retmap*		如果存在且為一，那麼:
  				 * 如果在 netrw 選擇的文件中，_且_
				 * 沒有定義過普通模式的 <2-leftmouse> 映射，
				那麼 <2-leftmouse> 會被映射以方便地回到 netrw
				瀏覽器窗口。
				 示例: 點擊一次，選擇並打開文件，雙擊返回

				備註: 你也可以選擇這麼做:
				 * let g:netrw_retmap= 1 (譯者注: 0？)，_且_
				 * nmap <silent> 你的選擇 <Plug>NetrwReturn
				來讓其它的映射，而不是 <2-leftmouse> 執行返回
				的任務。

				也可以用 |:Rexplore| 命令完成同樣的功能。

				  缺省: =0

  *g:netrw_rm_cmd*		刪除遠程文件的命令
				 缺省: "ssh USEPORT HOSTNAME rm"

  *g:netrw_rmdir_cmd*		刪除遠程目錄的命令
				 缺省: "ssh USEPORT HOSTNAME rmdir"

  *g:netrw_rmf_cmd*		刪除遠程軟鏈接的命令
				 缺省: "ssh USEPORT HOSTNAME rm -f"

  *g:netrw_servername*		此變量提供 |netrw-ctrl-r| 所用的服務器名。
				 缺省: "NETRWSERVER"

  *g:netrw_sort_by*		按 "name" (名字)、"time" (時間)、"size" (大小)
				或 "exten" (擴展名) 排序。
				 缺省: "name"

  *g:netrw_sort_direction*	排序方向: "normal" (普通) 或 "reverse" (反
  				轉) 缺省: "normal"

  *g:netrw_sort_options*	排序是通過 |:sort| 命令進行的；此變量的值會附
				加到排序命令之後。例如，在 .vimrc 裡加上以下內
				容就可以忽略大小寫: >
					let g:netrw_sort_options="i"
<				 缺省: ""

  *g:netrw_sort_sequence*	按名字排序時，先按逗號分隔的此模式序列排序。
				注意 模式須考慮表示文件類型的任何附綴。
				 缺省: '[\/]$,*,\.bak$,\.o$,\.h$,
                                        \.info$,\.swp$,\.obj$'

  *g:netrw_special_syntax*	如果為真，特定文件會以特殊語法出現在瀏覽器
  				中:

					netrwBak     : *.bak
					netrwCompress: *.gz *.bz2 *.Z *.zip
					netrwData    : *.dat
					netrwHdr     : *.h
					netrwLib     : *.a *.so *.lib *.dll
					netrwMakefile: [mM]akefile *.mak
					netrwObj     : *.o *.obj
					netrwTags    : tags ANmenu ANtags
					netrwTilde   : *
					netrwTmp     : tmp* *tmp

				這些語法高亮組缺省被鏈接到 Folded 或
				DiffChange (見 |hl-Folded| 和
				|hl-DiffChange|)，但你可以在 <.vimrc> 放上這樣
				的行 >
					hi link netrwCompress Visual
<				來定義自己的偏好。此外，還可以把設定存放在
				.vim/after/syntax/netrw.vim。

				例如，我自己使用深色背景的色彩方案，在
				.vim/after/syntax/netrw.vim 裡有以下設置: >

 hi netrwCompress term=NONE cterm=NONE gui=NONE ctermfg=10 guifg=green  ctermbg=0 guibg=black
 hi netrwData	  term=NONE cterm=NONE gui=NONE ctermfg=9 guifg=blue ctermbg=0 guibg=black
 hi netrwHdr	  term=NONE cterm=NONE,italic gui=NONE guifg=SeaGreen1
 hi netrwLex	  term=NONE cterm=NONE,italic gui=NONE guifg=SeaGreen1
 hi netrwYacc	  term=NONE cterm=NONE,italic gui=NONE guifg=SeaGreen1
 hi netrwLib	  term=NONE cterm=NONE gui=NONE ctermfg=14 guifg=yellow
 hi netrwObj	  term=NONE cterm=NONE gui=NONE ctermfg=12 guifg=red
 hi netrwTilde	  term=NONE cterm=NONE gui=NONE ctermfg=12 guifg=red
 hi netrwTmp	  term=NONE cterm=NONE gui=NONE ctermfg=12 guifg=red
 hi netrwTags	  term=NONE cterm=NONE gui=NONE ctermfg=12 guifg=red
 hi netrwDoc	  term=NONE cterm=NONE gui=NONE ctermfg=220 ctermbg=27 guifg=yellow2 guibg=Blue3
 hi netrwSymLink  term=NONE cterm=NONE gui=NONE ctermfg=220 ctermbg=27 guifg=grey60
<
  *g:netrw_ssh_browse_reject*	ssh 有時產生你不想要的行、消息、標題和任何你
  				不希望看作是 "目錄" 和 "文件" 的內容。
				此模式可用於刪除這些內嵌的信息。缺省值為:
					 '^total\s\+\d\+$'

  *g:netrw_ssh_cmd*		可以用此值代替 ssh，用於執行列表，刪除文件等
  				這些遠程動作的可執行命令。
				 缺省: ssh

 *g:netrw_suppress_gx_mesg*	=1 : 瀏覽器有時生成通常不需要的消息，混雜在頁
				面之中。
				不過，比如使用 links 時，這些消息正是瀏覽器產
				生的。如果設置此選項為 0，netrw 不會抑制瀏覽器
				消息。

  *g:netrw_tmpfile_escape*	=' &;'
  				對所有的臨時文件使用 escape() 來轉義這些字符。

  *g:netrw_timefmt*		指定代替 %c 的 strftime() 的格式字符串
				缺省值 "%c"，根據我的 strftime() 項目的 man 頁
				面，是 "建議使用的本地 locale 日期時間的表現方
				式"；不過，不是所有人都滿意。一些選擇:
				 "%a %d %b %Y %T"、
				 " %a %Y-%m-%d  %I-%M-%S %p"
				 缺省: "%c"

  *g:netrw_use_noswf*		netrw 通常避免給瀏覽器緩衝區寫入交換文件。不
				過，在有些系統上，看來這麼做引起討厭的 ml_get
				錯誤；如果你看到 ml_get 錯誤，嘗試在 .vimrc 中
				放入
				  let g:netrw_use_noswf= 0
				  缺省: 1

  *g:netrw_winsize*		指定 "o" (見 |netrw-o|)、"v" (見 |netrw-v|)、
				|:Hexplore| 或 |:Vexplore| 建立的新窗口的初始
				大小。g:netrw_winsize 是整數，指定當前 netrw
				緩衝區窗口大小的百分比，來設定新窗口的大小。
				 如果 g:netrw_winsize 小於零，其絕對值用來指定
				新窗口的絕對行數和列數。
				 如果 g:netrw_winsize 為零，使用正常分割方式
				(如 |'equalalways'| 生效，等等)。
				 缺省: "50" (代表 50%)

  *g:netrw_wiw*			=1 指定收縮 netw/Lexplore 窗口使用的最小窗口寬
				度
				(見 |netrw-c-tab|)。

  *g:netrw_xstrlen*		控制 netrw 如何計算包含多字節字符的字符串的長
  				度 (來自 N Weibull、T Mechelynck)
				=0: 使用 Vim 的內建 strlen()
				=1: 代碼點的個數 (Latin a + 組合用 circumflex
				    是兩個代碼點)  (缺省)
				=2: 佔空間的代碼點個數 (Latin + 組合用
				    circumflex 是一個佔空間的代碼點；硬製表符
				    是一個；寬和窄的 CJK 都是一個；等等)
				=3: 虛擬長度 (製表符在 1 到 |'tabstop'| 之間，
				    寬 CJK 是 2 而不是 1，阿拉伯 alif 在 lam
				    之前是零，否則為 1，等等)

  *g:NetrwTopLvlMenu*		指定頂層子菜單名；缺省為 "Netrw."。
				如果你想改變，在 .vimrc 裡進行。

NETRW 瀏 覽 和 選 項 不 兼 容 性		*netrw-incompatible* {{{2

netrw 的設計中，對用戶選項的處理是先保存它們，設置和 netrw 需要兼容的選項值，
然後恢復原有的值。但 autochdir 選項: >
	:set acd
是有問題的。autochdir 設置當前目錄為編輯文件所在的目錄；這顯然也適用於目錄。換
而言之，autochdir 設置當前目錄為包含該 "文件" 的目錄 (即使該 "文件" 本身也是目
錄)。

NETRW 設 置 窗 口				*netrw-settings-window* {{{2

使用 NetrwSettings.vim 插件， >
	:NetrwSettings
會彈出一個窗口來顯示用作 netrw 設置的許多變量。你可以修改這裡列出的所有值；保
存文件時，設置的值就會被應用。在任何行上按 "?" 就可以得到每個變量功能的幫助。

(另見: |netrw-browser-var| |netrw-protocol| |netrw-variables|)


獲 取 文 件						*netrw-obtain* *netrw-O* {{{2

如果沒有帶標記文件:

    瀏覽遠程目錄時，用戶可用 O 鍵獲取光標所在的文件 (即在本地機器上保存備份，
    但不編輯)。

如果有帶標記文件:

    獲取帶標記文件 (即傳輸一個備份到本地機器，但不用來編輯)。

此操作只支持 ftp 和 scp (既然只有它們能用作瀏覽，這應該不是問題)。這時
狀態行的右側會顯示 "Obtaining filename" 這樣的消息。傳輸完成後，狀態行復原。

netrw 也可以用本地瀏覽器 "獲得" 文件。netrw 顯示的目錄不一定和 Vim 的 "當前目
錄" 一致，除非用戶的 <.vimrc> 裡把 |g:netrw_keepdir| 設為 0。在本地瀏覽器裡選
擇文件 (光標移動到該文件名上) 然後按 "O" 就可以 "獲得" 該文件；也就是把它複製
到 Vim 的當前目錄。

相關主題:
 * 察看當前目錄可用 |:pwd|
 * 使得當前瀏覽目錄成為當前目錄可見 |netrw-c|
 * 要自動使得當前瀏覽目錄總成為當前目錄可見 |g:netrw_keepdir|。

					*netrw-newfile* *netrw-createfile*
在 NETRW 當 前 目 錄 打 開 新 文 件		*netrw-%* {{{2

要在 netrw 當前目錄打開一個新文件，按 "%"。此映射詢問用戶新的文件名；然後在
netrw 當前目錄 (即 b:netrw_curdir) 就會建立以此命名的的空文件。

相關主題:               |netrw-d|


預 覽 窗 口				*netrw-p* *netrw-preview* {{{2

用 "p" 鍵可以使用預覽窗口來預覽光標所在的文件名。屏幕會被分割以同時顯示瀏覽器
(光標還在那裡) 和文件 (見 |:pedit|)。缺省，進行水平分割；如果先設置好
|g:netrw_preview| 就可以進行垂直分割。

一組有意思的 netrw 設置是: >

	let g:netrw_preview   = 1
	let g:netrw_liststyle = 3
	let g:netrw_winsize   = 30

它們會:

	1. 使垂直分割成為缺省的文件預覽方式
	2. 使 "樹形" 成為缺省的列表方式
	3. 打開垂直預覽窗口時，目錄列表只用 30% 列；窗口其餘部分用於預覽窗口。

	相關: 如果你喜歡這個想法，你可能對 :Lexplore (|netrw-:Lexplore|) 或
	      |g:netrw_chgwin| 也會感興趣

另見: |g:netrw_chgwin| |netrw-P| |'previewwindow'| |CTRL-W_z| |:pclose|


前 次 窗 口					*netrw-P* *netrw-prvwin* {{{2

要使用上次使用 (最近訪問) 的窗口編輯光標下的文件或目錄 (見 :he |CTRL-W_P|)，按
"P"。如果只有一個窗口，該窗口被水平分割 (缺省)。

如果多於一個窗口，重用上次使用的窗口以顯示選擇的文件/目錄。如果前次窗口相關聯
的緩衝區被修改而且該緩衝區只有這個窗口，用戶會被詢問是否要先保存該緩衝區 (yes
(是)、no (否) 或 cancel (取消))。

相關動作 |netrw-cr| |netrw-o| |netrw-t| |netrw-v|
相關設置變量:
   |g:netrw_alto|    控制上/下分割
   |g:netrw_altv|    控制右/左分割
   |g:netrw_preview| 控制水平/垂直分割
   |g:netrw_winsize| 控制初始大小

另見: |g:netrw_chgwin| |netrw-p|


刷 新 列 表			*netrw-refresh* *netrw-ctrl-l* *netrw-ctrl_l* {{{2

要刷新本地或遠程目錄列表，按 ctrl-l (<c-l>) 或在列表的 ./ 目錄項上按 <cr>。用
":e ." 也可以刷新本地目錄。


反 轉 排 序 順 序			*netrw-r* *netrw-reverse* {{{2

用 "r" 鍵可以在正常和反轉兩種排序順序之間切換。

相關主題:     |netrw-s|
相關設置變量: |g:netrw_sort_direction|


給 文 件 或 目 錄 換 名		*netrw-move* *netrw-rename* *netrw-R* {{{2

如果沒有用 |netrw-mf| 標記過文件:

    換名文件和目錄涉及以下操作: 移動光標到要移動 (換名) 的文件/目錄，然後
    按 "R"。你會被詢問要把文件/目錄換什麼名字。用 "V" 命令 (可視選擇) 可以選擇
    行範圍，然後按 "R" ；每個文件會依次詢問要換成什麼名字。

如果用 |netrw-mf| 標記過文件:

    帶標記文件會被移動 (換名)；和上面一樣，你會被詢問文件/目錄要移動到的位置。

    如果你對換名詢問的回答是 "s/frompattern/topattern/"，則會對標記文件列表的
    每個後續文件通過取得名字，執行替換，把替換結果作為要換的名字來進行換名。
    作為一個例子: >

	mr  [query: reply with *.c]
	R   [query: reply with s/^\(.*\)\.c$/\1.cpp/]
<
    此例會標記所有的 *.c 文件便執行換名為 *.cpp 文件。

    ctrl-X 字符對文件換名有特殊意義: >

	<c-x>      : 單個 ctrl-x 告知 netrw 忽略響應在最後的 '/' 和 ctrl-x 之
		     間的部分。

	<c-x><c-x> : 一對連續 ctrl-x 告知 netrw 忽略字符串在兩個 ctrl-x 之前的
		     所有部分。
<
    警 告:~

    注意 移動文件是一個危險的操作；複製更安全。因為遠程文件的 "移動" 實際上是
    複製 + 刪除 -- 如果複製失敗但刪除成功，該文件就會丟失。
    後果自負。

g:netrw_rename_cmd 變量實現遠程換名。缺省值為:

	ssh HOSTNAME mv

使用瘦風格時，用 V (|linewise-visual|) 可以給若干文件和目錄同時換名。


選 擇 排 序 風 格			*netrw-s* *netrw-sort* {{{2

可以選擇排序風格，使之按 name (名字)、time (時間) 或 size (文件大小) 排序。
"s" 映射允許你在這三個選擇之間循環；目錄列表會自動更新以反映選擇的風格。

相關主題:     |netrw-r| |netrw-S|
相關設置變量: |g:netrw_sort_by| |g:netrw_sort_sequence|


設 置 編 輯 窗 口		*netrw-editwindow* *netrw-C* *netrw-:NetrwC* {{{2

用 "C" 映射選擇一個 netrw 窗口用以編輯，此映射使用 :NetrwC [win#] 命令，也可以
設置 |g:netrw_chgwin| 為要選擇的窗口號。此後，選擇文件以進行編輯 (|netrw-cr|)
時都用該窗口。

	* C : 單獨使用，選擇當前 netrw 緩衝區所在的窗口用於 |netrw-cr| 的編
	  輯。C 映射只可用於 netrw 緩衝區。

	* [count]C : 計數用作窗口號，用於後繼的 |netrw-cr| 的編輯。

	* :NetrwC 設置 |g:netrw_chgwin| 為當前窗口

	* :NetrwC win#  設置 |g:netrw_chgwin| 為指定窗口號

用 >
	let g:netrw_chgwin= -1
可以恢復缺省的編輯行為 (即使用當前窗口進行編輯)。

相關主題:			|netrw-cr| |g:netrw_browse_split|
相關設置變量:			|g:netrw_chgwin|


縮 放 NETRW 或 LEXPLORE 窗 口				*netrw-c-tab* {{{2

<c-tab> 鍵切換 netrw 或 |:Lexplore| 窗口的寬度，但僅當 |:netrw_usetab| 存在且
非零時才有效 (當然，它還需要終端支持能區別 <c-tab> 和普通的 <tab>)。

  * 如果當前窗口是 netrw 窗口，切換寬度 (在 |g:netrw_wiw| 和它的原始寬度之間)

  * 否則如果當前標籤頁有 |:Lexplore| 窗口，切換其寬度

  * 否則打開新 |:Lexplore| 窗口

如果 |g:netrw_usetab| 存在且為零，或已有 <c-tab> 映射存在，不重新映射
<c-tab>。也可以使用 <c-tab> 以外的映射: (但 g:netrw_usetab 還必須設置) >

	nmap <unique> (隨便什麼)	<Plug>NetrwShrink
<
相關主題:			|:Lexplore|
相關設置變量:			|g:netrw_usetab|


用 戶 定 義 映 射 					*netrw-usermaps* {{{1

可以自定義用戶映射。指定變量，|g:Netrw_UserMaps|，來保存鍵映射字符串和函數名的
列表的 |List|: >

	[["鍵映射序列","示例用戶映射函數"],...]
<
netrw 為 netrw 緩衝區設置映射時，如果 |g:Netrw_UserMaps| 存在，調用內部函數
netrw#UserMaps(islocal)。此函數遍歷 |g:Netrw_UserMaps| 列表的所有項目:

	* 設置映射: >
		nno <buffer> <silent> 鍵映射序列
		:call s:UserMaps(islocal,"示例用戶映射函數")
<	* 如果函數調用返回字符串 "refresh"，刷新
	* 如果返回的字符串不是 ""，執行該字符串 (:exe 返回結果)
	* 如果返回的是列表，對返回列表裡的每個字符串執行上述兩項

用戶函數接受一個參數；就像這樣 >

	fun! ExampleUserMapFunc(islocal)
<
其中，如果是本地目錄的系統調用，a:islocal 為 1，如果是遠程目錄的系統調用，為
0。

用 netrw#Expose("varname")           來訪問 netrw 內部 (局部於腳本) 變量。
用 netrw#Modify("varname",newvalue)  來改變 netrw 內部變量。
用 netrw#Call("funcname"[,args])     來調用 netrw 內部函數和指定所需參數。

示例: 得到 netrw 標記文件列表的備份: >

	let netrwmarkfilelist= netrw#Expose("netrwmarkfilelist")
<
示例: 修改 netrw 標記文件列表的值: >

	call netrw#Modify("netrwmarkfilelist",[])
<
示例: 通過映射 gu 來清除 netrw 標記文件列表 >
    " ExampleUserMap: {{{2
    fun! ExampleUserMap(islocal)
      call netrw#Modify("netrwmarkfilelist",[])
      call netrw#Modify('netrwmarkfilemtch_{bufnr("%")}',"")
      let retval= ["refresh"]
      return retval
    endfun
    let g:Netrw_UserMaps= [["gu","ExampleUserMap"]]
<
==============================================================================
10. 問題和修正						*netrw-problems* {{{1

	(本節可能會不斷增長，視乎我得到的反饋而定)
	(另見 |netrw-debug|)
								*netrw-p1*
	P1. 我用 windows 95，我的 ftp 每次讀取之後多了額外的四個空行。

		見 |netrw-fixup|，在 <.vimrc> 文件裡加入下行:

			let g:netrw_win95ftp= 1

								*netrw-p2*
	P2. 我用 windows，用 ftp 進行網絡瀏覽不能按時間或大小排序 -或- 遠程系
	    統是 Windows 服務器；為什麼我不能按時間或大小排序？

		Windows 的 ftp 只有基本的 ls 的支持 (即，不支持排序的選項)。它
		也不支持 -F 以給出類型字符 (ABC/ 代表 "ABC 是目錄")。
		netrw 使用 dir 得到的瘦長兩種列表。如果你認為自己的 ftp 支持完
		整功能的 ls，在 <.vimrc> 加入下行: >

			let g:netrw_ftp_list_cmd= "ls -lF"
			let g:netrw_ftp_timelist_cmd= "ls -tlF"
			let g:netrw_ftp_sizelist_cmd= "ls -slF"
<
		還有一個辦法，如果你在 Windows 上安裝了 cygwin，在 <.vimrc> 加
		入下行: >

			let g:netrw_cygwin= 1
<
		如果遠端系統使用 Windows，這個問題也會出現。在此情形下，
		g:netrw_ftp_[time|size]list_cmds 諸命令如上所示，但遠端系統不
		會因而正確地修改它的列表方式。


								*netrw-p3*
	P3. 我嘗試 rcp://user@host/ (或任何不是 ftp 的協議) 但 netrw 使用
	     ssh！我不要這樣...

		netrw 有兩個方法進行遠程目錄瀏覽: ssh 和 ftp。除非你指定 ftp，
		使用的只能是 ssh。
		如果你需要下載文件 (不是目錄列表)，netrw 會使用你要求的任何協
		議。

								*netrw-p4*
	P4. 我喜歡缺省使用長格式的列表。

	    在 |.vimrc| 裡放入: >
			let g:netrw_liststyle=1
<
		|netrw-browser-var| 說明你可以改變的更多設置。

								*netrw-p5*
	P5. 本地瀏覽時，時間顯示不正常

		你系統的 strftime() 是否接受 "%c" 以產生類似於下面的格式:
		"Sun Apr 27 11:49:23 1997"？如果不是，執行 "man strftime" 尋找
		什麼選項可以完成類似的功能。然後在 |.vimrc| 裡放入: >
			let g:netrw_timefmt= "%X"  (其中 X 是找到的選項)
<
								*netrw-p6*
	P6. 我想讓當前目錄和我的瀏覽同步。如何進行？

	    在 |.vimrc| 裡放入:
>
		let g:netrw_keepdir= 0
<
								*netrw-p7*
        P7. 我在文件名中使用中文 (或其它非 ascii) 字符，netrw (Explore、
            Sexplore、Hexplore 等) 卻不能顯示這些文件名！

		(取自 Wu Yongwei 在 Vim 郵件列表上的回答)
                我現在明白你的問題了。你的代碼頁不是 936，對麼？Vim 看來只能打
                開在當前代碼頁中合法的文件名，這和許多其它不使用 Unicode 版本
                的 Windows API 的應用程序一樣。這是操作系統上的問題。如果系統
                locale 使用 UTF-8 就不應該有這個問題，例如現代的 Linux 的各種
                發佈就是如此。

		(...又多一個理由鼓勵大家使用 utf-8！)

								*netrw-p8*
	P8. 我看到錯誤 "你的系統無法執行 ssh" -- 我該怎麼辦？

		(Dudley Fox) 我知道的多數人在 windows 上 用 putty 的 ssh。這是
		一個免費的 ssh/telnet 應用。更多的情況可見:

		http://www.chiark.greenend.org.uk/~sgtatham/putty/ 還有:

		(Marlin Unruh) 我也用這個程序。它是一個單獨的可執行文件，所以
		可以複製到 Windows\System32 文件夾並建立一個快捷方式。

		(Dudley Fox) 你也可以考慮 plink，聽起來它和你要找的很接近。
		plink 是 putty 程序包中的一個應用。

           http://the.earth.li/~sgtatham/putty/0.58/htmldoc/Chapter7.html#plink

	   	(Vissale Neang) 你可以試試 OpenSSH 的 windows 版本，可以在這裡
		得到:

		http://sshwindows.sourceforge.net/

		它並不需要 Cygwin 包。

		(Antoine Mechelynck) 對於單獨需要在直接的 Windows 環境工作的
		Unix 風格的程序，我推薦從 sourceforge 的 GnuWin32 項目獲取，如
		果有的話:

		    http://gnuwin32.sourceforge.net/

		和 Cygwin 不同，後者建立一個在 Windows 之上的 Unix 風格的模擬
		機，而 GnuWin32 使用 Windows 系統調用來重寫 Unix 工具，它的程
		序也能在 cmd.exe "Dos 窗口" 中正常運行。

		(dave) 下載 WinSCP並用它連到服務器上。Preferences > Editors 選
		項裡設置 gvim 為你的編輯器:

			- 點擊 "Add..."
			- 設置外部編輯器 (如果需要，調整實際的路徑並加上引號和
			  最後的 !.!):
			    "c:\Program Files\Vim\vim70\gvim.exe" !.!
			- 確認下面框中的文件類型為 {asterisk}.{asterisk} (即所
			  有文件)，或任何你期望的類型 (cec: 把 {asterisk} 換成
			  * ；我這麼寫是因為不然的話，helptags 系統認為它是一
			  個標籤)
			- 確認它在列表框的頂端 (如若不然，點擊它再點擊 "Up")
		如果使用 Norton Commander 風格，你只要按 <F4> 來使用本地的
		gvim 來編輯文件。

		(Vit Gottwald) 如何生成公鑰/私鑰並把公鑰存在服務器上: >
  http://www.chiark.greenend.org.uk/~sgtatham/putty/0.60/htmldoc/Chapter8.html#pubkey-gettingready
			(8.3 Getting ready for public key authentication)
<
		'pscp' 如何使用私鑰: >

  http://www.chiark.greenend.org.uk/~sgtatham/putty/0.60/htmldoc/Chapter5.html
			(5.2.4 Using public key authentication with PSCP)
<
		(Ben Schmidt) 我發現 cwRsync 所帶的 ssh 太好了，現在我在自己用
		的大多數 Windows 系統上都安裝了 cwRsync 或 cwRsyncServer。對只
		需要在 Windows 上 ssh 的人來說，我推測同一作者提供的 COPSSH 可
		能更好，而且它還帶有 cwRsync 沒有的 sftp 等等工具。雖然它可能
		... (譯者注: 下文缺)

		(cec) 要正確地使用的以上的建議，你需要在 .vimrc 中修改以下用戶
		可設的變量:

		|g:netrw_ssh_cmd| |g:netrw_list_cmd|  |g:netrw_mkdir_cmd|
		|g:netrw_rm_cmd|  |g:netrw_rmdir_cmd| |g:netrw_rmf_cmd|

		第一個 (|g:netrw_ssh_cmd|) 是最重要的；多數其它的變量在缺省情
		況下使用和 g:netrw_ssh_cmd 相同的值。

						*netrw-p9* *netrw-ml_get*
	P9. 我在瀏覽，切換目錄，哦！出現了 ml_get 錯誤，我不得不殺掉 vim。有什
	    麼解決方法？

		netrw 通常避免給臨時目錄緩衝區寫入交換文件。不過，在有些系統
		上，看來這麼做引起 ml_get 錯誤；嘗試在 <.vimrc> 中設置
		|g:netrw_use_noswf| 為零: >
			let g:netrw_use_noswf= 0
<
								*netrw-p10*
	P10. "[something] is a directory" 和
	     "Press ENTER or type command to continue" 這些提示煩死我了...

		"[something] is a directory" 提示是 Vim 發出的，不是 netrw，看
		來沒有辦法繞過它。再加上缺省的 cmdHeight 為 1，此消息導致了
		"Press ENTER..." 提示。所以:  閱讀 |hit-enter|；
		我也建議你在 <.vimrc> 文件裡設置 |'cmdheight'| 為 2 (或更高)。

								*netrw-p11*
	P11. 我想要有兩個窗口；一個瘦的在左邊，我的編輯窗口在右邊。應該怎麼
	     做？

	     你可能想在一個邊窗運行 netrw。如果這樣，":[N]Lexplore" 可能就是你
	     所想要的。可選的 "[N]" 可以讓你指定想要的 |:Lexplore| 開始的列數
	     (關於此參數如何工作，見 |g:netrw_winsize|)。

	     之前的方法:

		* 在 <.vimrc> 放入:
			let g:netrw_altv = 1
		* 編輯當前目錄:  :e .
		* 選擇某個文件，按 v
		* 按照自己需要調整窗口大小 (見 |CTRL-W_<| 和 |CTRL-W_>|)。如果
		  使用 gvim，可用鼠標拖動分割欄。
		* 想編輯新文件時，用 ctrl-w h 回到 netrw 瀏覽器，選擇文件，然
		  後按 P (見 |CTRL-W_h| 和 |netrw-P|)。如果使用 gvim，在瀏覽器
		  窗口按 <leftmouse> 然後用 <middlemouse> 來選擇文件。


								*netrw-p12*
	P12. 我的目錄排序不對，或者有不想要的字符出現在列出的文件名裡，或者寬
	     列表中名字的對齊有問題...

	     這可能是編碼的問題，我自己通常使用 utf-8，但其實只用 ascii (也就
	     是 32-126 的字符)。多字節編碼每個字符使用兩個 (或更多) 字節。你可
	     能需要改變 |g:netrw_sepchr| 和/或 |g:netrw_xstrlen|。

								*netrw-p13*
	P13. 我是 Windows + putty + ssh 的用戶，每次我試圖瀏覽時，目錄沒有結尾
	     的 "/"，所以 netrw 當成文件傳輸而不試圖當成子目錄瀏覽。怎麼辦？

	     (mikeyao) 如果你在 Windows 上用 ssh 和 putty 訪問 vim，嘗試
	     pscp/psftp 加上 plink 的組合。pscp/psftp 用於連接，而 plink 用於
	     執行服務器端的命令。例如: 列出文件和 'ls' 目錄。

	     以下是我使用的設置:
>
	    " 列出文件。這是關鍵設置。如果沒有設置好，只能得到空白緩衝區。
	    let g:netrw_list_cmd = "plink HOSTNAME ls -Fa"
	    " 如果沒有把 putty 目錄加到系統目錄中，必須指定 scp/sftp 命令的位
	    " 置。例如:
	    "let g:netrw_sftp_cmd = "d:\\dev\\putty\\PSFTP.exe"
	    "let g:netrw_scp_cmd = "d:\\dev\\putty\\PSCP.exe"
<
								*netrw-p14*
	P14. 我想加快 Nwrite 和 scp/ssh 風格連接的寫操作。怎麼做？(Thomer M.
	     Gil)

	     ssh 的 ControlMaster 和 ControlPath (見 ssh_config man 幫助頁) 可
	     用來使多個 ssh 連接共享同一個網絡連接。這可減少每個文件寫入的加密
	     握手協議，有時這可提升速度一個數量級以上。
	     (見  http://thomer.com/howtos/netrw_ssh.html)
	     (此段文字得到許可)

	     在你的 ~/.ssh/config 中加入: >

		 # 可把 "*" 改為你關心的終端名
		 Host *
		   ControlMaster auto
		   ControlPath /tmp/%r@%h:%p

<	     然後建立一個到此終端的 ssh 連接，並保持之: >

		 ssh -N host.domain.com

<	     現在用 Vim 的 Netrw 遠程打開文件，享受極速吧: >

		vim scp://host.domain.com//home/user/.bashrc
<
								*netrw-p15*
	P15. 如何用雙擊而不是 netrw 通常的單擊來打開文件或目錄？(Ben Fritz)

	     首先，關閉 netrw 的映射 >
		    let g:netrw_mousemaps= 0
<	     然後在 $HOME/.vim/after/ftplugin/netrw.vim 中創建只適用 netrw 緩
	     沖區的映射: >
		    nmap <buffer> <2-leftmouse> <CR>
<	     注意 設置 g:netrw_mousemaps 為零關閉所有 netrw 的鼠標映射，不只是
	     <leftmouse> 的。
	     (見 |g:netrw_mousemaps|)

								*netrw-p16*
	P16. Windows 裡編輯遠程文件 (如 :e ftp://hostname/path/file) 時，得到
	     |E303| 信息，抱怨不能打開交換文件。
	     to open a swap file.

	     (romainl) 看來你從一個受保護的目錄下啟動 Vim。從你的 $HOME 或其它
	     可寫的目錄下啟動 netrw。

								*netrw-p17*
	P17. Netrw 自己關閉了緩衝區。
	     如何重現此問題？
		1. :Explore，訪問目錄，打開文件
		2. :Explore，打開其它文件
		3. 第一步打開的緩衝區被關閉。
	    期待結果是什麼？實際看到了什麼？
		我期待兩個緩衝區同時存在，但實際只看見了最後那個。

	   (Lance) 問題出在 .vimrc 裡的 "set autochdir"。
	   (drchip) 置位 |'acd'| 時我能重現此問題。不過，緩衝區不是真的關閉；
	            ":ls!" 還能顯示它們 (但 ":ls" 不會)。

								*netrw-P18*
	P18. 如何本地編輯只能通過 ssh 訪問的其它服務器上的文件？
	     見 http://stackoverflow.com/questions/12469645/
	     "Using Vim to Remotely Edit A File on ServerB Only
	      Accessible From ServerA"

								*netrw-P19*
	P19. 目錄列表中如何得到行號？
		通過 |g:netrw_bufsettings| 可以控制 netrw 緩衝區設置；試試在
		.vimrc 裡放上 >
		  let g:netrw_bufsettings="noma nomod nu nobl nowrap ro nornu"
<		如果喜歡相對行號，試試 >
		  let g:netrw_bufsettings="noma nomod nonu nobl nowrap ro rnu"
<
								*netrw-P20*
	P20. 如何使 gvim 啟動時顯示目錄列表？
		在 .vimrc 裡放上以下代碼片斷: >
		    augroup VimStartup
		      au!
		      au VimEnter * if expand("%") == "" && argc() == 0 &&
		      \ (v:servername =~ 'GVIM\d*' || v:servername == "")
		      \ | e . | endif
		    augroup END
<		如果你特別想要，可以用 Lexplore 來代替 "e"。
		此代碼片斷假定你打開客戶-服務器功能 (即 "huge" vim 版本)。

								*netrw-P21*
	P21. 我建立的目錄 (或文件) 使用了帶重音的字符，但 netrw 不讓我進入該目
		錄/讀取文件:

		可能是外殼或操作系統使用了和 vim (netrw) 不同的編碼。將來 vim
		支持 "systemencoding" 的補丁也許可以解決這個問題；現在，只要讓
		netrw 使用合適的編碼就可以了。例如: >

			au FileType netrw set enc=latin1
<
								*netrw-P22*
	P22. 試圖複製或移動文件時出錯:

		**error** (netrw) tried using g:netrw_localcopycmd<cp>; it doesn't work!

	     怎麼回事？

	     Netrw 使用若干係統級的命令來完成任務 (見

		 |g:netrw_localcopycmd|, |g:netrw_localmovecmd|,
		 |g:netrw_localrmdir|, |g:netrw_mkdir_cmd|)。

	    可能需要在 .vimrc 裡適當地調整部分這些命令。另一個困難源於這些命令
	    使用了 vim 的本地目錄，但它和 netrw 顯示的瀏覽目錄可能有所不同 (見
	    |g:netrw_keepdir|)。


==============================================================================
11. 調試 netrw 自身					*netrw-debug* {{{1

第一步: 確定你遇到的問題是否所以通過獲取最新的 (通常是開發版本) netrw 得到解
決，最新版本在:

	http://www.drchip.org/astronaut/vim/index.html#NETRW

<netrw.vim> 腳本通常安裝的系統位置是:
>
 	/usr/local/share/vim/vim7x/plugin/netrwPlugin.vim
	/usr/local/share/vim/vim7x/autoload/netrw.vim
		(見 :echo &rtp 的輸出)
<
在啟動時自動被加載 (假設 :set nocp)。如果你案頭了新版本的 netrw，它位於 >

	$HOME/.vim/plugin/netrwPlugin.vim
	$HOME/.vim/autoload/netrw.vim
<
第二步: 假定你安裝了最新版本的 netrw，確定你的問題是否真的由 netrw 引起。新建
一個叫 netrw.vimrc 的文件，包含以下內容: >

	set nocp
	so $HOME/.vim/plugin/netrwPlugin.vim
<
然後這樣執行 netrw: >

	vim -u netrw.vimrc --noplugins -i NONE [some path here]
<
執行任何你想要的 netrw 命令，然後檢查問題是否存在。此過程迴避了由於個人 .vimrc
設置，.viminfo 文件和其它插件引起的問題。如果問題不再出現，你需要自己找到什麼
.vimrc 設置引起了和 netrw 或其它相關插件的衝突。

第三步: 如果問題仍然存在，這樣獲取 netrw 的調試跟蹤:

	1. 先從這裡取得 <Decho.vim> 腳本:

	     http://www.drchip.org/astronaut/vim/index.html#DECHO
	   或者
	     http://vim.sourceforge.net/scripts/script.php?script_id=120

	  Decho.vim 以 "vimball" 形式出現；見 |vimball-intro|。

	2. 修改 <netrw.vim> 文件如下: >

		vim netrw.vim
		:DechoOn
		:wq
<
	   要恢復到正常的非調試行為，修改 <netrw.vim> 如下: >

		vim netrw.vim
		:DechoOff
		:wq
<
	   此命令由 <Decho.vim> 提供，它會註釋掉所有 Decho 調試語句 (Dfunc()、
	   Dret()、Decho()、Dredir())。

	3. 然後啟動 vim 進行文件傳輸或者進行瀏覽以重現錯誤。一系列消息應該在一
	   個單獨的標籤頁或服務器 vim 窗口出現，提示 <netrw.vim> 進行網絡文件
	   讀寫的一系列步驟。

           要保存文件，用 >
		:tabnext
		:set bt=
		:w! DBG

<	   進一步，最好你能鍵入 >
		:Dsep <command>
<	   其中的 <command> 是你將要鍵入的命令，這樣就容易把調試跟蹤的哪部分和
	   哪條命令對應趕來。

	   請把該信息發送到 <netrw.vim> 的維護者，還請包括使用的操作系統和 vim
	   版本 (見 |:version|) >
		NdrOchip at ScampbellPfamily.AbizM - NOSPAM
<
==============================================================================
12. 歷史 (英文)						*netrw-history* {{{1

	v156:	Feb 18, 2016	* Changed =~ to =~# where appropriate
		Feb 23, 2016	* s:ComposePath(base,subdir) now uses
				  fnameescape() on the base portion
		Mar 01, 2016	* (gt_macki) reported where :Explore would
				  make file unlisted. Fixed (tst943)
		Apr 04, 2016	* (reported by John Little) netrw normally
				  suppresses browser messages, but sometimes
				  those "messages" are what is wanted.
				  See |g:netrw_suppress_gx_mesg|
		Apr 06, 2016	* (reported by Carlos Pita) deleting a remote
				  file was giving an error message.  Fixed.
		Apr 08, 2016	* (Charles Cooper) had a problem with an
				  undefined b:netrw_curdir.  He also provided
				  a fix.
		Apr 20, 2016	* Changed s:NetrwGetBuffer(); now uses
				  dictionaries.  Also fixed the "No Name"
				  buffer problem.
	v155:	Oct 29, 2015	* (Timur Fayzrakhmanov) reported that netrw's
				  mapping of ctrl-l was not allowing refresh of
				  other windows when it was done in a netrw
				  window.
		Nov 05, 2015	* Improved s:TreeSqueezeDir() to use search()
				  instead of a loop
				* NetrwBrowse() will return line to
				  w:netrw_bannercnt if cursor ended up in
				  banner
		Nov 16, 2015	* Added a <Plug>NetrwTreeSqueeze (|netrw-s-cr|)
		Nov 17, 2015	* Commented out imaps -- perhaps someone can
				  tell me how they're useful and should be
				  retained?
		Nov 20, 2015	* Added |netrw-ma| and |netrw-mA| support
		Nov 20, 2015	* gx (|netrw-gx|) on an url downloaded the
				  file in addition to simply bringing up the
				  url in a browser.  Fixed.
		Nov 23, 2015	* Added |g:netrw_sizestyle| support
		Nov 27, 2015	* Inserted a lot of <c-u>s into various netrw
				  maps.
		Jan 05, 2016	* |netrw-qL| implemented to mark files based
				  upon |location-list|s; similar to |netrw-qF|.
		Jan 19, 2016	* using - call delete(directoryname,"d") -
				  instead of using g:netrw_localrmdir if
				  v7.4 + patch#1107 is available
		Jan 28, 2016	* changed to using |winsaveview()| and
				  |winrestview()|
		Jan 28, 2016	* s:NetrwTreePath() now does a save and
				  restore of view
		Feb 08, 2016	* Fixed a tree-listing problem with remote
				  directories
	v154:	Feb 26, 2015	* (Yuri Kanivetsky) reported a situation where
				  a file was not treated properly as a file
				  due to g:netrw_keepdir == 1
		Mar 25, 2015	* (requested by Ben Friz) one may now sort by
				  extension
		Mar 28, 2015	* (requested by Matt Brooks) netrw has a lot
				  of buffer-local mappings; however, some
				  plugins (such as vim-surround) set up
				  conflicting mappings that cause vim to wait.
				  The "<nowait>" modifier has been included
				  with most of netrw's mappings to avoid that
				  delay.
		Jun 26, 2015	* |netrw-gn| mapping implemted
				* :Ntree NotADir resulted in having
				  the tree listing expand in the error messages
				  window.  Fixed.
		Jun 29, 2015	* Attempting to delete a file remotely caused
				  an error with "keepsol" mentioned; fixed.
		Jul 08, 2015	* Several changes to keep the |:jumps| table
				  correct when working with
				  |g:netrw_fastbrowse| set to 2
				* wide listing with accented characters fixed
				  (using %-S instead of %-s with a |printf()|
		Jul 13, 2015	* (Daniel Hahler) CheckIfKde() could be true
				  but kfmclient not installed.  Changed order
				  in netrw#BrowseX(): checks if kde and
				  kfmclient, then will use xdg-open on a unix
				  system (if xdg-open is executable)
		Aug 11, 2015	* (McDonnell) tree listing mode wouldn't
				  select a file in a open subdirectory.
				* (McDonnell) when multiple subdirectories
				  were concurrently open in tree listing
				  mode, a ctrl-L wouldn't refresh properly.
				* The netrw:target menu showed duplicate
				  entries
		Oct 13, 2015	* (mattn) provided an exception to handle
				  windows with shellslash set but no shell
		Oct 23, 2015	* if g:netrw_usetab and <c-tab> now used
				  to control whether NetrwShrink is used
				  (see |netrw-c-tab|)
	v153:	May 13, 2014	* added another |g:netrw_ffkeep| usage {{{2
		May 14, 2014	* changed s:PerformListing() so that it
				  always sets ft=netrw for netrw buffers
				  (ie. even when syntax highlighting is
				  off, not available, etc)
		May 16, 2014	* introduced the |netrw-ctrl-r| functionality
		May 17, 2014	* introduced the |netrw-:NetrwMB| functionality
				* mb and mB (|netrw-mb|, |netrw-mB|) will
				  add/remove marked files from bookmark list
		May 20, 2014	* (Enno Nagel) reported that :Lex <dirname>
				  wasn't working.  Fixed.
		May 26, 2014	* restored test to prevent leftmouse window
				  resizing from causing refresh.
				  (see s:NetrwLeftmouse())
				* fixed problem where a refresh caused cursor
				  to go just under the banner instead of
				  staying put
		May 28, 2014	* (Laszlo Bimba) provided a patch for opening
				  the |:Lexplore| window 100% high, optionally
				  on the right, and will work with remote
				  files.
		May 29, 2014	* implemented :NetrwC  (see |netrw-:NetrwC|)
		Jun 01, 2014	* Removed some "silent"s from commands used
				  to implemented scp://... and pscp://...
				  directory listing.  Permits request for
				  password to appear.
		Jun 05, 2014	* (Enno Nagel) reported that user maps "/"
				  caused problems with "b" and "w", which
				  are mapped (for wide listings only) to
				  skip over files rather than just words.
		Jun 10, 2014	* |g:netrw_gx| introduced to allow users to
				  override default "<cfile>" with the gx
				  (|netrw-gx|) map
		Jun 11, 2014	* gx (|netrw-gx|), with |'autowrite'| set,
				  will write modified files.  s:NetrwBrowseX()
				  will now save, turn off, and restore the
				  |'autowrite'| setting.
		Jun 13, 2014	* added visual map for gx use
		Jun 15, 2014	* (Enno Nagel) reported that with having hls
				  set and wide listing style in use, that the
				  b and w maps caused unwanted highlighting.
		Jul 05, 2014	* |netrw-mv| and |netrw-mX| commands included
		Jul 09, 2014	* |g:netrw_keepj| included, allowing optional
				  keepj
		Jul 09, 2014	* fixing bugs due to previous update
		Jul 21, 2014	* (Bruno Sutic) provided an updated
				  netrw_gitignore.vim
		Jul 30, 2014	* (Yavuz Yetim) reported that editing two
				  remote files of the same name caused the
				  second instance to have a "temporary"
				  name.  Fixed: now they use the same buffer.
		Sep 18, 2014	* (Yasuhiro Matsumoto) provided a patch which
				  allows scp and windows local paths to work.
		Oct 07, 2014	* gx (see |netrw-gx|) when atop a directory,
				  will now do |gf| instead
		Nov 06, 2014	* For cygwin: cygstart will be available for
				  netrw#BrowseX() to use if its executable.
		Nov 07, 2014	* Began support for file://... urls.  Will use
				  |g:netrw_file_cmd| (typically elinks or links)
		Dec 02, 2014	* began work on having mc (|netrw-mc|) copy
				  directories.  Works for linux machines,
				  cygwin+vim, but not for windows+gvim.
		Dec 02, 2014	* in tree mode, netrw was not opening
				  directories via symbolic links.
		Dec 02, 2014	* added resolved link information to
				  thin and tree modes
		Dec 30, 2014	* (issue#231) |:ls| was not showing
				  remote-file buffers reliably.  Fixed.
	v152:	Apr 08, 2014	* uses the |'noswapfile'| option (requires {{{2
				  vim 7.4 with patch 213)
				* (Enno Nagel) turn |'rnu'| off in netrw
				  buffers.
				* (Quinn Strahl) suggested that netrw
				  allow regular window splitting to occur,
				  thereby allowing |'equalalways'| to take
				  effect.
				* (qingtian zhao) normally, netrw will
				  save and restore the |'fileformat'|;
				  however, sometimes that isn't wanted
		Apr 14, 2014	* whenever netrw marks a buffer as ro,
				  it will also mark it as nomod.
		Apr 16, 2014	* sftp protocol now supported by
				  netrw#Obtain(); this means that one
				  may use "mc" to copy a remote file
				  to a local file using sftp, and that
				  the |netrw-O| command can obtain remote
				  files via sftp.
				* added [count]C support (see |netrw-C|)
		Apr 18, 2014	* when |g:netrw_chgwin| is one more than
				  the last window, then vertically split
				  the last window and use it as the
				  chgwin window.
		May 09, 2014	* SavePosn was "saving filename under cursor"
				  from a non-netrw window when using :Rex.
	v151:	Jan 22, 2014	* extended :Rexplore to return to buffer {{{2
				  prior to Explore or editing a directory
				* (Ken Takata) netrw gave error when
				  clipboard was disabled.  Sol'n: Placed
				  several if has("clipboard") tests in.
				* Fixed ftp://X@Y@Z// problem; X@Y now
				  part of user id, and only Z is part of
				  hostname.
				* (A Loumiotis) reported that completion
				  using a directory name containing spaces
				  did not work.  Fixed with a retry in
				  netrw#Explore() which removes the
				  backslashes vim inserted.
		Feb 26, 2014	* :Rexplore now records the current file
				   using w:netrw_rexfile when returning via
				  |:Rexplore|
		Mar 08, 2014	* (David Kotchan) provided some patches
				  allowing netrw to work properly with
				  windows shares.
				* Multiple one-liner help messages available
				  by pressing <cr> while atop the "Quick
				  Help" line
				* worked on ShellCmdPost, FocusGained event
				  handling.
				* |:Lexplore| path: will be used to update
				  a left-side netrw browsing directory.
		Mar 12, 2014	* |netrw-s-cr|: use <s-cr>  to close
				  tree directory implemented
		Mar 13, 2014	* (Tony Mechylynck) reported that using
				  the browser with ftp on a directory,
				  and selecting a gzipped txt file, that
				  an E19 occurred (which was issued by
				  gzip.vim).  Fixed.
		Mar 14, 2014	* Implemented :MF and :MT (see |netrw-:MF|
				  and |netrw-:MT|, respectively)
		Mar 17, 2014	* |:Ntree| [dir] wasn't working properly; fixed
		Mar 18, 2014	* Changed all uses of set to setl
		Mar 18, 2014	* Commented the netrw_btkeep line in
				  s:NetrwOptionSave(); the effect is that
				  netrw buffers will remain as |'bt'|=nofile.
				  This should prevent swapfiles being created
				  for netrw buffers.
		Mar 20, 2014	* Changed all uses of lcd to use s:NetrwLcd()
				  instead.  Consistent error handling results
				  and it also handles Window's shares
				* Fixed |netrw-d| command when applied with ftp
				* https: support included for netrw#NetRead()
	v150:	Jul 12, 2013	* removed a "keepalt" to allow ":e #" to {{{2
				  return to the netrw directory listing
		Jul 13, 2013	* (Jonas Diemer) suggested changing
				  a <cWORD> to <cfile>.
		Jul 21, 2013	* (Yuri Kanivetsky) reported that netrw's
				  use of mkdir did not produce directories
				  following the user's umask.
		Aug 27, 2013	* introduced |g:netrw_altfile| option
		Sep 05, 2013	* s:Strlen() now uses |strdisplaywidth()|
				  when available, by default
		Sep 12, 2013	* (Selyano Baldo) reported that netrw wasn't
				  opening some directories properly from the
				  command line.
		Nov 09, 2013	* |:Lexplore| introduced
				* (Ondrej Platek) reported an issue with
				  netrw's trees (P15).  Fixed.
				* (Jorge Solis) reported that "t" in
				  tree mode caused netrw to forget its
				  line position.
		Dec 05, 2013	* Added <s-leftmouse> file marking
				  (see |netrw-mf|)
		Dec 05, 2013	* (Yasuhiro Matsumoto) Explore should use
				  strlen() instead s:Strlen() when handling
				  multibyte chars with strpart()
				  (ie. strpart() is byte oriented, not
				  display-width oriented).
		Dec 09, 2013	* (Ken Takata) Provided a patch; File sizes
				  and a portion of timestamps were wrongly
				  highlighted with the directory color when
				  setting `:let g:netrw_liststyle=1` on Windows.
				* (Paul Domaskis) noted that sometimes
				  cursorline was activating in non-netrw
				  windows.  All but one setting of cursorline
				  was done via setl; there was one that was
				  overlooked.  Fixed.
		Dec 24, 2013	* (esquifit) asked that netrw allow the
				  /cygdrive prefix be a user-alterable
				  parameter.
		Jan 02, 2014	* Fixed a problem with netrw-based ballon
				  evaluation (ie. netrw#NetrwBaloonHelp()
				  not having been loaded error messages)
		Jan 03, 2014	* Fixed a problem with tree listings
				* New command installed: |:Ntree|
		Jan 06, 2014	* (Ivan Brennan) reported a problem with
				  |netrw-P|.  Fixed.
		Jan 06, 2014	* Fixed a problem with |netrw-P| when the
				  modified file was to be abandoned.
		Jan 15, 2014	* (Matteo Cavalleri) reported that when the
				  banner is suppressed and tree listing is
				  used, a blank line was left at the top of
				  the display.  Fixed.
		Jan 20, 2014	* (Gideon Go) reported that, in tree listing
				  style, with a previous window open, that
				  the wrong directory was being used to open
				  a file.  Fixed. (P21)
	v149:	Apr 18, 2013	* in wide listing format, now have maps for {{{2
				  w and b to move to next/previous file
		Apr 26, 2013	* one may now copy files in the same
				  directory; netrw will issue requests for
				  what names the files should be copied under
		Apr 29, 2013	* Trying Benzinger's problem again.  Seems
				  that commenting out the BufEnter and
				  installing VimEnter (only) works.  Weird
				  problem!  (tree listing, vim -O Dir1 Dir2)
		May 01, 2013	* :Explore ftp://... wasn't working.  Fixed.
		May 02, 2013	* introduced |g:netrw_bannerbackslash| as
				  requested by Paul Domaskis.
		Jul 03, 2013	* Explore now avoids splitting when a buffer
				  will be hidden.
	v148:	Apr 16, 2013	* changed Netrw's Style menu to allow direct {{{2
				  choice of listing style, hiding style, and
				  sorting style

==============================================================================
13. Todo (英文)						*netrw-todo* {{{1

07/29/09 : banner	:|g:netrw_banner| can be used to suppress the
	   suppression	  banner.  This feature is new and experimental,
			  so its in the process of being debugged.
09/04/09 : "gp"		: See if it can be made to work for remote systems.
			: See if it can be made to work with marked files.

==============================================================================
14. 鳴謝						*netrw-credits* {{{1

	Vim editor	by Bram Moolenaar (謝了，Bram!)
	dav		提供支持: C Campbell
	fetch		提供支持: Bram Moolenaar 和 C Campbell
	ftp		提供支持: C Campbell <NdrOchip@ScampbellPfamily.AbizM>
	http		提供支持: Bram Moolenaar <bram@moolenaar.net>
	rcp
	rsync		提供支持: C Campbell (Erik Warendorph 提供建議)
	scp		提供支持: raf <raf@comdyn.com.au>
	sftp		提供支持: C Campbell

	inputsecret()、BufReadCmd、BufWriteCmd 由 C Campbell 提供

	Jerome Auge		-- 也使用新的緩衝區方法操作 ftp+.netrc
	Bram Moolenaar		-- 顯然寫了 vim 本身，還有 :e 和 v:cmdarg 的使
                                   用， fetch 等
	Yasuhiro Matsumoto	-- 指出 undo+0r 的問題和解決方法
	Erik Warendorph		-- 提供若干建議 (g:netrw_..._cmd 變量，rsync
                                   等)
	Doug Claar		-- 提供能成功通過 ftp 操作的測試的修改

==============================================================================
模式行: {{{1
 vim:tw=78:ts=8:ft=help:norl:fdm=marker
